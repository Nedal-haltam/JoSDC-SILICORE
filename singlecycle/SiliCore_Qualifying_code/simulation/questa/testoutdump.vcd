$date
	Tue Oct 15 11:24:15 2024
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 1 # PC [5] $end
$var wire 1 $ PC [4] $end
$var wire 1 % PC [3] $end
$var wire 1 & PC [2] $end
$var wire 1 ' PC [1] $end
$var wire 1 ( PC [0] $end
$var wire 1 ) data [31] $end
$var wire 1 * data [30] $end
$var wire 1 + data [29] $end
$var wire 1 , data [28] $end
$var wire 1 - data [27] $end
$var wire 1 . data [26] $end
$var wire 1 / data [25] $end
$var wire 1 0 data [24] $end
$var wire 1 1 data [23] $end
$var wire 1 2 data [22] $end
$var wire 1 3 data [21] $end
$var wire 1 4 data [20] $end
$var wire 1 5 data [19] $end
$var wire 1 6 data [18] $end
$var wire 1 7 data [17] $end
$var wire 1 8 data [16] $end
$var wire 1 9 data [15] $end
$var wire 1 : data [14] $end
$var wire 1 ; data [13] $end
$var wire 1 < data [12] $end
$var wire 1 = data [11] $end
$var wire 1 > data [10] $end
$var wire 1 ? data [9] $end
$var wire 1 @ data [8] $end
$var wire 1 A data [7] $end
$var wire 1 B data [6] $end
$var wire 1 C data [5] $end
$var wire 1 D data [4] $end
$var wire 1 E data [3] $end
$var wire 1 F data [2] $end
$var wire 1 G data [1] $end
$var wire 1 H data [0] $end
$var wire 1 I regs0 [31] $end
$var wire 1 J regs0 [30] $end
$var wire 1 K regs0 [29] $end
$var wire 1 L regs0 [28] $end
$var wire 1 M regs0 [27] $end
$var wire 1 N regs0 [26] $end
$var wire 1 O regs0 [25] $end
$var wire 1 P regs0 [24] $end
$var wire 1 Q regs0 [23] $end
$var wire 1 R regs0 [22] $end
$var wire 1 S regs0 [21] $end
$var wire 1 T regs0 [20] $end
$var wire 1 U regs0 [19] $end
$var wire 1 V regs0 [18] $end
$var wire 1 W regs0 [17] $end
$var wire 1 X regs0 [16] $end
$var wire 1 Y regs0 [15] $end
$var wire 1 Z regs0 [14] $end
$var wire 1 [ regs0 [13] $end
$var wire 1 \ regs0 [12] $end
$var wire 1 ] regs0 [11] $end
$var wire 1 ^ regs0 [10] $end
$var wire 1 _ regs0 [9] $end
$var wire 1 ` regs0 [8] $end
$var wire 1 a regs0 [7] $end
$var wire 1 b regs0 [6] $end
$var wire 1 c regs0 [5] $end
$var wire 1 d regs0 [4] $end
$var wire 1 e regs0 [3] $end
$var wire 1 f regs0 [2] $end
$var wire 1 g regs0 [1] $end
$var wire 1 h regs0 [0] $end
$var wire 1 i regs1 [31] $end
$var wire 1 j regs1 [30] $end
$var wire 1 k regs1 [29] $end
$var wire 1 l regs1 [28] $end
$var wire 1 m regs1 [27] $end
$var wire 1 n regs1 [26] $end
$var wire 1 o regs1 [25] $end
$var wire 1 p regs1 [24] $end
$var wire 1 q regs1 [23] $end
$var wire 1 r regs1 [22] $end
$var wire 1 s regs1 [21] $end
$var wire 1 t regs1 [20] $end
$var wire 1 u regs1 [19] $end
$var wire 1 v regs1 [18] $end
$var wire 1 w regs1 [17] $end
$var wire 1 x regs1 [16] $end
$var wire 1 y regs1 [15] $end
$var wire 1 z regs1 [14] $end
$var wire 1 { regs1 [13] $end
$var wire 1 | regs1 [12] $end
$var wire 1 } regs1 [11] $end
$var wire 1 ~ regs1 [10] $end
$var wire 1 !! regs1 [9] $end
$var wire 1 "! regs1 [8] $end
$var wire 1 #! regs1 [7] $end
$var wire 1 $! regs1 [6] $end
$var wire 1 %! regs1 [5] $end
$var wire 1 &! regs1 [4] $end
$var wire 1 '! regs1 [3] $end
$var wire 1 (! regs1 [2] $end
$var wire 1 )! regs1 [1] $end
$var wire 1 *! regs1 [0] $end
$var wire 1 +! regs2 [31] $end
$var wire 1 ,! regs2 [30] $end
$var wire 1 -! regs2 [29] $end
$var wire 1 .! regs2 [28] $end
$var wire 1 /! regs2 [27] $end
$var wire 1 0! regs2 [26] $end
$var wire 1 1! regs2 [25] $end
$var wire 1 2! regs2 [24] $end
$var wire 1 3! regs2 [23] $end
$var wire 1 4! regs2 [22] $end
$var wire 1 5! regs2 [21] $end
$var wire 1 6! regs2 [20] $end
$var wire 1 7! regs2 [19] $end
$var wire 1 8! regs2 [18] $end
$var wire 1 9! regs2 [17] $end
$var wire 1 :! regs2 [16] $end
$var wire 1 ;! regs2 [15] $end
$var wire 1 <! regs2 [14] $end
$var wire 1 =! regs2 [13] $end
$var wire 1 >! regs2 [12] $end
$var wire 1 ?! regs2 [11] $end
$var wire 1 @! regs2 [10] $end
$var wire 1 A! regs2 [9] $end
$var wire 1 B! regs2 [8] $end
$var wire 1 C! regs2 [7] $end
$var wire 1 D! regs2 [6] $end
$var wire 1 E! regs2 [5] $end
$var wire 1 F! regs2 [4] $end
$var wire 1 G! regs2 [3] $end
$var wire 1 H! regs2 [2] $end
$var wire 1 I! regs2 [1] $end
$var wire 1 J! regs2 [0] $end
$var wire 1 K! regs3 [31] $end
$var wire 1 L! regs3 [30] $end
$var wire 1 M! regs3 [29] $end
$var wire 1 N! regs3 [28] $end
$var wire 1 O! regs3 [27] $end
$var wire 1 P! regs3 [26] $end
$var wire 1 Q! regs3 [25] $end
$var wire 1 R! regs3 [24] $end
$var wire 1 S! regs3 [23] $end
$var wire 1 T! regs3 [22] $end
$var wire 1 U! regs3 [21] $end
$var wire 1 V! regs3 [20] $end
$var wire 1 W! regs3 [19] $end
$var wire 1 X! regs3 [18] $end
$var wire 1 Y! regs3 [17] $end
$var wire 1 Z! regs3 [16] $end
$var wire 1 [! regs3 [15] $end
$var wire 1 \! regs3 [14] $end
$var wire 1 ]! regs3 [13] $end
$var wire 1 ^! regs3 [12] $end
$var wire 1 _! regs3 [11] $end
$var wire 1 `! regs3 [10] $end
$var wire 1 a! regs3 [9] $end
$var wire 1 b! regs3 [8] $end
$var wire 1 c! regs3 [7] $end
$var wire 1 d! regs3 [6] $end
$var wire 1 e! regs3 [5] $end
$var wire 1 f! regs3 [4] $end
$var wire 1 g! regs3 [3] $end
$var wire 1 h! regs3 [2] $end
$var wire 1 i! regs3 [1] $end
$var wire 1 j! regs3 [0] $end
$var wire 1 k! regs4 [31] $end
$var wire 1 l! regs4 [30] $end
$var wire 1 m! regs4 [29] $end
$var wire 1 n! regs4 [28] $end
$var wire 1 o! regs4 [27] $end
$var wire 1 p! regs4 [26] $end
$var wire 1 q! regs4 [25] $end
$var wire 1 r! regs4 [24] $end
$var wire 1 s! regs4 [23] $end
$var wire 1 t! regs4 [22] $end
$var wire 1 u! regs4 [21] $end
$var wire 1 v! regs4 [20] $end
$var wire 1 w! regs4 [19] $end
$var wire 1 x! regs4 [18] $end
$var wire 1 y! regs4 [17] $end
$var wire 1 z! regs4 [16] $end
$var wire 1 {! regs4 [15] $end
$var wire 1 |! regs4 [14] $end
$var wire 1 }! regs4 [13] $end
$var wire 1 ~! regs4 [12] $end
$var wire 1 !" regs4 [11] $end
$var wire 1 "" regs4 [10] $end
$var wire 1 #" regs4 [9] $end
$var wire 1 $" regs4 [8] $end
$var wire 1 %" regs4 [7] $end
$var wire 1 &" regs4 [6] $end
$var wire 1 '" regs4 [5] $end
$var wire 1 (" regs4 [4] $end
$var wire 1 )" regs4 [3] $end
$var wire 1 *" regs4 [2] $end
$var wire 1 +" regs4 [1] $end
$var wire 1 ," regs4 [0] $end
$var wire 1 -" regs5 [31] $end
$var wire 1 ." regs5 [30] $end
$var wire 1 /" regs5 [29] $end
$var wire 1 0" regs5 [28] $end
$var wire 1 1" regs5 [27] $end
$var wire 1 2" regs5 [26] $end
$var wire 1 3" regs5 [25] $end
$var wire 1 4" regs5 [24] $end
$var wire 1 5" regs5 [23] $end
$var wire 1 6" regs5 [22] $end
$var wire 1 7" regs5 [21] $end
$var wire 1 8" regs5 [20] $end
$var wire 1 9" regs5 [19] $end
$var wire 1 :" regs5 [18] $end
$var wire 1 ;" regs5 [17] $end
$var wire 1 <" regs5 [16] $end
$var wire 1 =" regs5 [15] $end
$var wire 1 >" regs5 [14] $end
$var wire 1 ?" regs5 [13] $end
$var wire 1 @" regs5 [12] $end
$var wire 1 A" regs5 [11] $end
$var wire 1 B" regs5 [10] $end
$var wire 1 C" regs5 [9] $end
$var wire 1 D" regs5 [8] $end
$var wire 1 E" regs5 [7] $end
$var wire 1 F" regs5 [6] $end
$var wire 1 G" regs5 [5] $end
$var wire 1 H" regs5 [4] $end
$var wire 1 I" regs5 [3] $end
$var wire 1 J" regs5 [2] $end
$var wire 1 K" regs5 [1] $end
$var wire 1 L" regs5 [0] $end

$scope module cpu $end
$var wire 1 M" clk $end
$var wire 1 N" rst $end
$var wire 1 # PC [5] $end
$var wire 1 $ PC [4] $end
$var wire 1 % PC [3] $end
$var wire 1 & PC [2] $end
$var wire 1 ' PC [1] $end
$var wire 1 ( PC [0] $end
$var wire 1 O" instruction [31] $end
$var wire 1 P" instruction [30] $end
$var wire 1 Q" instruction [29] $end
$var wire 1 R" instruction [28] $end
$var wire 1 S" instruction [27] $end
$var wire 1 T" instruction [26] $end
$var wire 1 U" instruction [25] $end
$var wire 1 V" instruction [24] $end
$var wire 1 W" instruction [23] $end
$var wire 1 X" instruction [22] $end
$var wire 1 Y" instruction [21] $end
$var wire 1 Z" instruction [20] $end
$var wire 1 [" instruction [19] $end
$var wire 1 \" instruction [18] $end
$var wire 1 ]" instruction [17] $end
$var wire 1 ^" instruction [16] $end
$var wire 1 _" instruction [15] $end
$var wire 1 `" instruction [14] $end
$var wire 1 a" instruction [13] $end
$var wire 1 b" instruction [12] $end
$var wire 1 c" instruction [11] $end
$var wire 1 d" instruction [10] $end
$var wire 1 e" instruction [9] $end
$var wire 1 f" instruction [8] $end
$var wire 1 g" instruction [7] $end
$var wire 1 h" instruction [6] $end
$var wire 1 i" instruction [5] $end
$var wire 1 j" instruction [4] $end
$var wire 1 k" instruction [3] $end
$var wire 1 l" instruction [2] $end
$var wire 1 m" instruction [1] $end
$var wire 1 n" instruction [0] $end
$var wire 1 o" writeData [31] $end
$var wire 1 p" writeData [30] $end
$var wire 1 q" writeData [29] $end
$var wire 1 r" writeData [28] $end
$var wire 1 s" writeData [27] $end
$var wire 1 t" writeData [26] $end
$var wire 1 u" writeData [25] $end
$var wire 1 v" writeData [24] $end
$var wire 1 w" writeData [23] $end
$var wire 1 x" writeData [22] $end
$var wire 1 y" writeData [21] $end
$var wire 1 z" writeData [20] $end
$var wire 1 {" writeData [19] $end
$var wire 1 |" writeData [18] $end
$var wire 1 }" writeData [17] $end
$var wire 1 ~" writeData [16] $end
$var wire 1 !# writeData [15] $end
$var wire 1 "# writeData [14] $end
$var wire 1 ## writeData [13] $end
$var wire 1 $# writeData [12] $end
$var wire 1 %# writeData [11] $end
$var wire 1 &# writeData [10] $end
$var wire 1 '# writeData [9] $end
$var wire 1 (# writeData [8] $end
$var wire 1 )# writeData [7] $end
$var wire 1 *# writeData [6] $end
$var wire 1 +# writeData [5] $end
$var wire 1 ,# writeData [4] $end
$var wire 1 -# writeData [3] $end
$var wire 1 .# writeData [2] $end
$var wire 1 /# writeData [1] $end
$var wire 1 0# writeData [0] $end
$var wire 1 1# readData1 [31] $end
$var wire 1 2# readData1 [30] $end
$var wire 1 3# readData1 [29] $end
$var wire 1 4# readData1 [28] $end
$var wire 1 5# readData1 [27] $end
$var wire 1 6# readData1 [26] $end
$var wire 1 7# readData1 [25] $end
$var wire 1 8# readData1 [24] $end
$var wire 1 9# readData1 [23] $end
$var wire 1 :# readData1 [22] $end
$var wire 1 ;# readData1 [21] $end
$var wire 1 <# readData1 [20] $end
$var wire 1 =# readData1 [19] $end
$var wire 1 ># readData1 [18] $end
$var wire 1 ?# readData1 [17] $end
$var wire 1 @# readData1 [16] $end
$var wire 1 A# readData1 [15] $end
$var wire 1 B# readData1 [14] $end
$var wire 1 C# readData1 [13] $end
$var wire 1 D# readData1 [12] $end
$var wire 1 E# readData1 [11] $end
$var wire 1 F# readData1 [10] $end
$var wire 1 G# readData1 [9] $end
$var wire 1 H# readData1 [8] $end
$var wire 1 I# readData1 [7] $end
$var wire 1 J# readData1 [6] $end
$var wire 1 K# readData1 [5] $end
$var wire 1 L# readData1 [4] $end
$var wire 1 M# readData1 [3] $end
$var wire 1 N# readData1 [2] $end
$var wire 1 O# readData1 [1] $end
$var wire 1 P# readData1 [0] $end
$var wire 1 Q# readData2 [31] $end
$var wire 1 R# readData2 [30] $end
$var wire 1 S# readData2 [29] $end
$var wire 1 T# readData2 [28] $end
$var wire 1 U# readData2 [27] $end
$var wire 1 V# readData2 [26] $end
$var wire 1 W# readData2 [25] $end
$var wire 1 X# readData2 [24] $end
$var wire 1 Y# readData2 [23] $end
$var wire 1 Z# readData2 [22] $end
$var wire 1 [# readData2 [21] $end
$var wire 1 \# readData2 [20] $end
$var wire 1 ]# readData2 [19] $end
$var wire 1 ^# readData2 [18] $end
$var wire 1 _# readData2 [17] $end
$var wire 1 `# readData2 [16] $end
$var wire 1 a# readData2 [15] $end
$var wire 1 b# readData2 [14] $end
$var wire 1 c# readData2 [13] $end
$var wire 1 d# readData2 [12] $end
$var wire 1 e# readData2 [11] $end
$var wire 1 f# readData2 [10] $end
$var wire 1 g# readData2 [9] $end
$var wire 1 h# readData2 [8] $end
$var wire 1 i# readData2 [7] $end
$var wire 1 j# readData2 [6] $end
$var wire 1 k# readData2 [5] $end
$var wire 1 l# readData2 [4] $end
$var wire 1 m# readData2 [3] $end
$var wire 1 n# readData2 [2] $end
$var wire 1 o# readData2 [1] $end
$var wire 1 p# readData2 [0] $end
$var wire 1 q# extImm [31] $end
$var wire 1 r# extImm [30] $end
$var wire 1 s# extImm [29] $end
$var wire 1 t# extImm [28] $end
$var wire 1 u# extImm [27] $end
$var wire 1 v# extImm [26] $end
$var wire 1 w# extImm [25] $end
$var wire 1 x# extImm [24] $end
$var wire 1 y# extImm [23] $end
$var wire 1 z# extImm [22] $end
$var wire 1 {# extImm [21] $end
$var wire 1 |# extImm [20] $end
$var wire 1 }# extImm [19] $end
$var wire 1 ~# extImm [18] $end
$var wire 1 !$ extImm [17] $end
$var wire 1 "$ extImm [16] $end
$var wire 1 #$ extImm [15] $end
$var wire 1 $$ extImm [14] $end
$var wire 1 %$ extImm [13] $end
$var wire 1 &$ extImm [12] $end
$var wire 1 '$ extImm [11] $end
$var wire 1 ($ extImm [10] $end
$var wire 1 )$ extImm [9] $end
$var wire 1 *$ extImm [8] $end
$var wire 1 +$ extImm [7] $end
$var wire 1 ,$ extImm [6] $end
$var wire 1 -$ extImm [5] $end
$var wire 1 .$ extImm [4] $end
$var wire 1 /$ extImm [3] $end
$var wire 1 0$ extImm [2] $end
$var wire 1 1$ extImm [1] $end
$var wire 1 2$ extImm [0] $end
$var wire 1 3$ ALUin2 [31] $end
$var wire 1 4$ ALUin2 [30] $end
$var wire 1 5$ ALUin2 [29] $end
$var wire 1 6$ ALUin2 [28] $end
$var wire 1 7$ ALUin2 [27] $end
$var wire 1 8$ ALUin2 [26] $end
$var wire 1 9$ ALUin2 [25] $end
$var wire 1 :$ ALUin2 [24] $end
$var wire 1 ;$ ALUin2 [23] $end
$var wire 1 <$ ALUin2 [22] $end
$var wire 1 =$ ALUin2 [21] $end
$var wire 1 >$ ALUin2 [20] $end
$var wire 1 ?$ ALUin2 [19] $end
$var wire 1 @$ ALUin2 [18] $end
$var wire 1 A$ ALUin2 [17] $end
$var wire 1 B$ ALUin2 [16] $end
$var wire 1 C$ ALUin2 [15] $end
$var wire 1 D$ ALUin2 [14] $end
$var wire 1 E$ ALUin2 [13] $end
$var wire 1 F$ ALUin2 [12] $end
$var wire 1 G$ ALUin2 [11] $end
$var wire 1 H$ ALUin2 [10] $end
$var wire 1 I$ ALUin2 [9] $end
$var wire 1 J$ ALUin2 [8] $end
$var wire 1 K$ ALUin2 [7] $end
$var wire 1 L$ ALUin2 [6] $end
$var wire 1 M$ ALUin2 [5] $end
$var wire 1 N$ ALUin2 [4] $end
$var wire 1 O$ ALUin2 [3] $end
$var wire 1 P$ ALUin2 [2] $end
$var wire 1 Q$ ALUin2 [1] $end
$var wire 1 R$ ALUin2 [0] $end
$var wire 1 S$ ALUResult [31] $end
$var wire 1 T$ ALUResult [30] $end
$var wire 1 U$ ALUResult [29] $end
$var wire 1 V$ ALUResult [28] $end
$var wire 1 W$ ALUResult [27] $end
$var wire 1 X$ ALUResult [26] $end
$var wire 1 Y$ ALUResult [25] $end
$var wire 1 Z$ ALUResult [24] $end
$var wire 1 [$ ALUResult [23] $end
$var wire 1 \$ ALUResult [22] $end
$var wire 1 ]$ ALUResult [21] $end
$var wire 1 ^$ ALUResult [20] $end
$var wire 1 _$ ALUResult [19] $end
$var wire 1 `$ ALUResult [18] $end
$var wire 1 a$ ALUResult [17] $end
$var wire 1 b$ ALUResult [16] $end
$var wire 1 c$ ALUResult [15] $end
$var wire 1 d$ ALUResult [14] $end
$var wire 1 e$ ALUResult [13] $end
$var wire 1 f$ ALUResult [12] $end
$var wire 1 g$ ALUResult [11] $end
$var wire 1 h$ ALUResult [10] $end
$var wire 1 i$ ALUResult [9] $end
$var wire 1 j$ ALUResult [8] $end
$var wire 1 k$ ALUResult [7] $end
$var wire 1 l$ ALUResult [6] $end
$var wire 1 m$ ALUResult [5] $end
$var wire 1 n$ ALUResult [4] $end
$var wire 1 o$ ALUResult [3] $end
$var wire 1 p$ ALUResult [2] $end
$var wire 1 q$ ALUResult [1] $end
$var wire 1 r$ ALUResult [0] $end
$var wire 1 s$ memoryReadData [31] $end
$var wire 1 t$ memoryReadData [30] $end
$var wire 1 u$ memoryReadData [29] $end
$var wire 1 v$ memoryReadData [28] $end
$var wire 1 w$ memoryReadData [27] $end
$var wire 1 x$ memoryReadData [26] $end
$var wire 1 y$ memoryReadData [25] $end
$var wire 1 z$ memoryReadData [24] $end
$var wire 1 {$ memoryReadData [23] $end
$var wire 1 |$ memoryReadData [22] $end
$var wire 1 }$ memoryReadData [21] $end
$var wire 1 ~$ memoryReadData [20] $end
$var wire 1 !% memoryReadData [19] $end
$var wire 1 "% memoryReadData [18] $end
$var wire 1 #% memoryReadData [17] $end
$var wire 1 $% memoryReadData [16] $end
$var wire 1 %% memoryReadData [15] $end
$var wire 1 &% memoryReadData [14] $end
$var wire 1 '% memoryReadData [13] $end
$var wire 1 (% memoryReadData [12] $end
$var wire 1 )% memoryReadData [11] $end
$var wire 1 *% memoryReadData [10] $end
$var wire 1 +% memoryReadData [9] $end
$var wire 1 ,% memoryReadData [8] $end
$var wire 1 -% memoryReadData [7] $end
$var wire 1 .% memoryReadData [6] $end
$var wire 1 /% memoryReadData [5] $end
$var wire 1 0% memoryReadData [4] $end
$var wire 1 1% memoryReadData [3] $end
$var wire 1 2% memoryReadData [2] $end
$var wire 1 3% memoryReadData [1] $end
$var wire 1 4% memoryReadData [0] $end
$var wire 1 5% imm [15] $end
$var wire 1 6% imm [14] $end
$var wire 1 7% imm [13] $end
$var wire 1 8% imm [12] $end
$var wire 1 9% imm [11] $end
$var wire 1 :% imm [10] $end
$var wire 1 ;% imm [9] $end
$var wire 1 <% imm [8] $end
$var wire 1 =% imm [7] $end
$var wire 1 >% imm [6] $end
$var wire 1 ?% imm [5] $end
$var wire 1 @% imm [4] $end
$var wire 1 A% imm [3] $end
$var wire 1 B% imm [2] $end
$var wire 1 C% imm [1] $end
$var wire 1 D% imm [0] $end
$var wire 1 E% opCode [5] $end
$var wire 1 F% opCode [4] $end
$var wire 1 G% opCode [3] $end
$var wire 1 H% opCode [2] $end
$var wire 1 I% opCode [1] $end
$var wire 1 J% opCode [0] $end
$var wire 1 K% funct [5] $end
$var wire 1 L% funct [4] $end
$var wire 1 M% funct [3] $end
$var wire 1 N% funct [2] $end
$var wire 1 O% funct [1] $end
$var wire 1 P% funct [0] $end
$var wire 1 Q% nextPC [5] $end
$var wire 1 R% nextPC [4] $end
$var wire 1 S% nextPC [3] $end
$var wire 1 T% nextPC [2] $end
$var wire 1 U% nextPC [1] $end
$var wire 1 V% nextPC [0] $end
$var wire 1 W% PCPlus1 [5] $end
$var wire 1 X% PCPlus1 [4] $end
$var wire 1 Y% PCPlus1 [3] $end
$var wire 1 Z% PCPlus1 [2] $end
$var wire 1 [% PCPlus1 [1] $end
$var wire 1 \% PCPlus1 [0] $end
$var wire 1 ]% adderResult [5] $end
$var wire 1 ^% adderResult [4] $end
$var wire 1 _% adderResult [3] $end
$var wire 1 `% adderResult [2] $end
$var wire 1 a% adderResult [1] $end
$var wire 1 b% adderResult [0] $end
$var wire 1 c% rs [4] $end
$var wire 1 d% rs [3] $end
$var wire 1 e% rs [2] $end
$var wire 1 f% rs [1] $end
$var wire 1 g% rs [0] $end
$var wire 1 h% rt [4] $end
$var wire 1 i% rt [3] $end
$var wire 1 j% rt [2] $end
$var wire 1 k% rt [1] $end
$var wire 1 l% rt [0] $end
$var wire 1 m% rd [4] $end
$var wire 1 n% rd [3] $end
$var wire 1 o% rd [2] $end
$var wire 1 p% rd [1] $end
$var wire 1 q% rd [0] $end
$var wire 1 r% WriteRegister [4] $end
$var wire 1 s% WriteRegister [3] $end
$var wire 1 t% WriteRegister [2] $end
$var wire 1 u% WriteRegister [1] $end
$var wire 1 v% WriteRegister [0] $end
$var wire 1 w% ALUOp [2] $end
$var wire 1 x% ALUOp [1] $end
$var wire 1 y% ALUOp [0] $end
$var wire 1 z% RegDst $end
$var wire 1 {% Branch $end
$var wire 1 |% MemReadEn $end
$var wire 1 }% MemtoReg $end
$var wire 1 ~% MemWriteEn $end
$var wire 1 !& RegWriteEn $end
$var wire 1 "& ALUSrc $end
$var wire 1 #& zero $end
$var wire 1 $& PCsrc $end
$var wire 1 I regs0 [31] $end
$var wire 1 J regs0 [30] $end
$var wire 1 K regs0 [29] $end
$var wire 1 L regs0 [28] $end
$var wire 1 M regs0 [27] $end
$var wire 1 N regs0 [26] $end
$var wire 1 O regs0 [25] $end
$var wire 1 P regs0 [24] $end
$var wire 1 Q regs0 [23] $end
$var wire 1 R regs0 [22] $end
$var wire 1 S regs0 [21] $end
$var wire 1 T regs0 [20] $end
$var wire 1 U regs0 [19] $end
$var wire 1 V regs0 [18] $end
$var wire 1 W regs0 [17] $end
$var wire 1 X regs0 [16] $end
$var wire 1 Y regs0 [15] $end
$var wire 1 Z regs0 [14] $end
$var wire 1 [ regs0 [13] $end
$var wire 1 \ regs0 [12] $end
$var wire 1 ] regs0 [11] $end
$var wire 1 ^ regs0 [10] $end
$var wire 1 _ regs0 [9] $end
$var wire 1 ` regs0 [8] $end
$var wire 1 a regs0 [7] $end
$var wire 1 b regs0 [6] $end
$var wire 1 c regs0 [5] $end
$var wire 1 d regs0 [4] $end
$var wire 1 e regs0 [3] $end
$var wire 1 f regs0 [2] $end
$var wire 1 g regs0 [1] $end
$var wire 1 h regs0 [0] $end
$var wire 1 i regs1 [31] $end
$var wire 1 j regs1 [30] $end
$var wire 1 k regs1 [29] $end
$var wire 1 l regs1 [28] $end
$var wire 1 m regs1 [27] $end
$var wire 1 n regs1 [26] $end
$var wire 1 o regs1 [25] $end
$var wire 1 p regs1 [24] $end
$var wire 1 q regs1 [23] $end
$var wire 1 r regs1 [22] $end
$var wire 1 s regs1 [21] $end
$var wire 1 t regs1 [20] $end
$var wire 1 u regs1 [19] $end
$var wire 1 v regs1 [18] $end
$var wire 1 w regs1 [17] $end
$var wire 1 x regs1 [16] $end
$var wire 1 y regs1 [15] $end
$var wire 1 z regs1 [14] $end
$var wire 1 { regs1 [13] $end
$var wire 1 | regs1 [12] $end
$var wire 1 } regs1 [11] $end
$var wire 1 ~ regs1 [10] $end
$var wire 1 !! regs1 [9] $end
$var wire 1 "! regs1 [8] $end
$var wire 1 #! regs1 [7] $end
$var wire 1 $! regs1 [6] $end
$var wire 1 %! regs1 [5] $end
$var wire 1 &! regs1 [4] $end
$var wire 1 '! regs1 [3] $end
$var wire 1 (! regs1 [2] $end
$var wire 1 )! regs1 [1] $end
$var wire 1 *! regs1 [0] $end
$var wire 1 +! regs2 [31] $end
$var wire 1 ,! regs2 [30] $end
$var wire 1 -! regs2 [29] $end
$var wire 1 .! regs2 [28] $end
$var wire 1 /! regs2 [27] $end
$var wire 1 0! regs2 [26] $end
$var wire 1 1! regs2 [25] $end
$var wire 1 2! regs2 [24] $end
$var wire 1 3! regs2 [23] $end
$var wire 1 4! regs2 [22] $end
$var wire 1 5! regs2 [21] $end
$var wire 1 6! regs2 [20] $end
$var wire 1 7! regs2 [19] $end
$var wire 1 8! regs2 [18] $end
$var wire 1 9! regs2 [17] $end
$var wire 1 :! regs2 [16] $end
$var wire 1 ;! regs2 [15] $end
$var wire 1 <! regs2 [14] $end
$var wire 1 =! regs2 [13] $end
$var wire 1 >! regs2 [12] $end
$var wire 1 ?! regs2 [11] $end
$var wire 1 @! regs2 [10] $end
$var wire 1 A! regs2 [9] $end
$var wire 1 B! regs2 [8] $end
$var wire 1 C! regs2 [7] $end
$var wire 1 D! regs2 [6] $end
$var wire 1 E! regs2 [5] $end
$var wire 1 F! regs2 [4] $end
$var wire 1 G! regs2 [3] $end
$var wire 1 H! regs2 [2] $end
$var wire 1 I! regs2 [1] $end
$var wire 1 J! regs2 [0] $end
$var wire 1 K! regs3 [31] $end
$var wire 1 L! regs3 [30] $end
$var wire 1 M! regs3 [29] $end
$var wire 1 N! regs3 [28] $end
$var wire 1 O! regs3 [27] $end
$var wire 1 P! regs3 [26] $end
$var wire 1 Q! regs3 [25] $end
$var wire 1 R! regs3 [24] $end
$var wire 1 S! regs3 [23] $end
$var wire 1 T! regs3 [22] $end
$var wire 1 U! regs3 [21] $end
$var wire 1 V! regs3 [20] $end
$var wire 1 W! regs3 [19] $end
$var wire 1 X! regs3 [18] $end
$var wire 1 Y! regs3 [17] $end
$var wire 1 Z! regs3 [16] $end
$var wire 1 [! regs3 [15] $end
$var wire 1 \! regs3 [14] $end
$var wire 1 ]! regs3 [13] $end
$var wire 1 ^! regs3 [12] $end
$var wire 1 _! regs3 [11] $end
$var wire 1 `! regs3 [10] $end
$var wire 1 a! regs3 [9] $end
$var wire 1 b! regs3 [8] $end
$var wire 1 c! regs3 [7] $end
$var wire 1 d! regs3 [6] $end
$var wire 1 e! regs3 [5] $end
$var wire 1 f! regs3 [4] $end
$var wire 1 g! regs3 [3] $end
$var wire 1 h! regs3 [2] $end
$var wire 1 i! regs3 [1] $end
$var wire 1 j! regs3 [0] $end
$var wire 1 k! regs4 [31] $end
$var wire 1 l! regs4 [30] $end
$var wire 1 m! regs4 [29] $end
$var wire 1 n! regs4 [28] $end
$var wire 1 o! regs4 [27] $end
$var wire 1 p! regs4 [26] $end
$var wire 1 q! regs4 [25] $end
$var wire 1 r! regs4 [24] $end
$var wire 1 s! regs4 [23] $end
$var wire 1 t! regs4 [22] $end
$var wire 1 u! regs4 [21] $end
$var wire 1 v! regs4 [20] $end
$var wire 1 w! regs4 [19] $end
$var wire 1 x! regs4 [18] $end
$var wire 1 y! regs4 [17] $end
$var wire 1 z! regs4 [16] $end
$var wire 1 {! regs4 [15] $end
$var wire 1 |! regs4 [14] $end
$var wire 1 }! regs4 [13] $end
$var wire 1 ~! regs4 [12] $end
$var wire 1 !" regs4 [11] $end
$var wire 1 "" regs4 [10] $end
$var wire 1 #" regs4 [9] $end
$var wire 1 $" regs4 [8] $end
$var wire 1 %" regs4 [7] $end
$var wire 1 &" regs4 [6] $end
$var wire 1 '" regs4 [5] $end
$var wire 1 (" regs4 [4] $end
$var wire 1 )" regs4 [3] $end
$var wire 1 *" regs4 [2] $end
$var wire 1 +" regs4 [1] $end
$var wire 1 ," regs4 [0] $end
$var wire 1 -" regs5 [31] $end
$var wire 1 ." regs5 [30] $end
$var wire 1 /" regs5 [29] $end
$var wire 1 0" regs5 [28] $end
$var wire 1 1" regs5 [27] $end
$var wire 1 2" regs5 [26] $end
$var wire 1 3" regs5 [25] $end
$var wire 1 4" regs5 [24] $end
$var wire 1 5" regs5 [23] $end
$var wire 1 6" regs5 [22] $end
$var wire 1 7" regs5 [21] $end
$var wire 1 8" regs5 [20] $end
$var wire 1 9" regs5 [19] $end
$var wire 1 :" regs5 [18] $end
$var wire 1 ;" regs5 [17] $end
$var wire 1 <" regs5 [16] $end
$var wire 1 =" regs5 [15] $end
$var wire 1 >" regs5 [14] $end
$var wire 1 ?" regs5 [13] $end
$var wire 1 @" regs5 [12] $end
$var wire 1 A" regs5 [11] $end
$var wire 1 B" regs5 [10] $end
$var wire 1 C" regs5 [9] $end
$var wire 1 D" regs5 [8] $end
$var wire 1 E" regs5 [7] $end
$var wire 1 F" regs5 [6] $end
$var wire 1 G" regs5 [5] $end
$var wire 1 H" regs5 [4] $end
$var wire 1 I" regs5 [3] $end
$var wire 1 J" regs5 [2] $end
$var wire 1 K" regs5 [1] $end
$var wire 1 L" regs5 [0] $end

$scope module pc $end
$var wire 1 M" clk $end
$var wire 1 N" rst $end
$var wire 1 Q% PCin [5] $end
$var wire 1 R% PCin [4] $end
$var wire 1 S% PCin [3] $end
$var wire 1 T% PCin [2] $end
$var wire 1 U% PCin [1] $end
$var wire 1 V% PCin [0] $end
$var reg 6 %& PCout [5:0] $end
$upscope $end

$scope module PCAdder $end
$var parameter 32 && size $end
$var wire 1 # in1 [5] $end
$var wire 1 $ in1 [4] $end
$var wire 1 % in1 [3] $end
$var wire 1 & in1 [2] $end
$var wire 1 ' in1 [1] $end
$var wire 1 ( in1 [0] $end
$var wire 1 '& in2 [5] $end
$var wire 1 (& in2 [4] $end
$var wire 1 )& in2 [3] $end
$var wire 1 *& in2 [2] $end
$var wire 1 +& in2 [1] $end
$var wire 1 ,& in2 [0] $end
$var wire 1 W% out [5] $end
$var wire 1 X% out [4] $end
$var wire 1 Y% out [3] $end
$var wire 1 Z% out [2] $end
$var wire 1 [% out [1] $end
$var wire 1 \% out [0] $end
$upscope $end

$scope module IM $end
$var wire 1 Q% address [5] $end
$var wire 1 R% address [4] $end
$var wire 1 S% address [3] $end
$var wire 1 T% address [2] $end
$var wire 1 U% address [1] $end
$var wire 1 V% address [0] $end
$var tri1 1 M" clock $end
$var wire 1 O" q [31] $end
$var wire 1 P" q [30] $end
$var wire 1 Q" q [29] $end
$var wire 1 R" q [28] $end
$var wire 1 S" q [27] $end
$var wire 1 T" q [26] $end
$var wire 1 U" q [25] $end
$var wire 1 V" q [24] $end
$var wire 1 W" q [23] $end
$var wire 1 X" q [22] $end
$var wire 1 Y" q [21] $end
$var wire 1 Z" q [20] $end
$var wire 1 [" q [19] $end
$var wire 1 \" q [18] $end
$var wire 1 ]" q [17] $end
$var wire 1 ^" q [16] $end
$var wire 1 _" q [15] $end
$var wire 1 `" q [14] $end
$var wire 1 a" q [13] $end
$var wire 1 b" q [12] $end
$var wire 1 c" q [11] $end
$var wire 1 d" q [10] $end
$var wire 1 e" q [9] $end
$var wire 1 f" q [8] $end
$var wire 1 g" q [7] $end
$var wire 1 h" q [6] $end
$var wire 1 i" q [5] $end
$var wire 1 j" q [4] $end
$var wire 1 k" q [3] $end
$var wire 1 l" q [2] $end
$var wire 1 m" q [1] $end
$var wire 1 n" q [0] $end
$var wire 1 -& sub_wire0 [31] $end
$var wire 1 .& sub_wire0 [30] $end
$var wire 1 /& sub_wire0 [29] $end
$var wire 1 0& sub_wire0 [28] $end
$var wire 1 1& sub_wire0 [27] $end
$var wire 1 2& sub_wire0 [26] $end
$var wire 1 3& sub_wire0 [25] $end
$var wire 1 4& sub_wire0 [24] $end
$var wire 1 5& sub_wire0 [23] $end
$var wire 1 6& sub_wire0 [22] $end
$var wire 1 7& sub_wire0 [21] $end
$var wire 1 8& sub_wire0 [20] $end
$var wire 1 9& sub_wire0 [19] $end
$var wire 1 :& sub_wire0 [18] $end
$var wire 1 ;& sub_wire0 [17] $end
$var wire 1 <& sub_wire0 [16] $end
$var wire 1 =& sub_wire0 [15] $end
$var wire 1 >& sub_wire0 [14] $end
$var wire 1 ?& sub_wire0 [13] $end
$var wire 1 @& sub_wire0 [12] $end
$var wire 1 A& sub_wire0 [11] $end
$var wire 1 B& sub_wire0 [10] $end
$var wire 1 C& sub_wire0 [9] $end
$var wire 1 D& sub_wire0 [8] $end
$var wire 1 E& sub_wire0 [7] $end
$var wire 1 F& sub_wire0 [6] $end
$var wire 1 G& sub_wire0 [5] $end
$var wire 1 H& sub_wire0 [4] $end
$var wire 1 I& sub_wire0 [3] $end
$var wire 1 J& sub_wire0 [2] $end
$var wire 1 K& sub_wire0 [1] $end
$var wire 1 L& sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 M& width_a $end
$var parameter 32 N& widthad_a $end
$var parameter 32 O& numwords_a $end
$var parameter 96 P& outdata_reg_a $end
$var parameter 32 Q& address_aclr_a $end
$var parameter 32 R& outdata_aclr_a $end
$var parameter 32 S& indata_aclr_a $end
$var parameter 32 T& wrcontrol_aclr_a $end
$var parameter 32 U& byteena_aclr_a $end
$var parameter 32 V& width_byteena_a $end
$var parameter 32 W& width_b $end
$var parameter 32 X& widthad_b $end
$var parameter 32 Y& numwords_b $end
$var parameter 48 Z& rdcontrol_reg_b $end
$var parameter 48 [& address_reg_b $end
$var parameter 96 \& outdata_reg_b $end
$var parameter 32 ]& outdata_aclr_b $end
$var parameter 32 ^& rdcontrol_aclr_b $end
$var parameter 48 _& indata_reg_b $end
$var parameter 48 `& wrcontrol_wraddress_reg_b $end
$var parameter 48 a& byteena_reg_b $end
$var parameter 32 b& indata_aclr_b $end
$var parameter 32 c& wrcontrol_aclr_b $end
$var parameter 32 d& address_aclr_b $end
$var parameter 32 e& byteena_aclr_b $end
$var parameter 32 f& width_byteena_b $end
$var parameter 48 g& clock_enable_input_a $end
$var parameter 48 h& clock_enable_output_a $end
$var parameter 48 i& clock_enable_input_b $end
$var parameter 48 j& clock_enable_output_b $end
$var parameter 120 k& clock_enable_core_a $end
$var parameter 120 l& clock_enable_core_b $end
$var parameter 160 m& read_during_write_mode_port_a $end
$var parameter 160 n& read_during_write_mode_port_b $end
$var parameter 40 o& enable_ecc $end
$var parameter 32 p& width_eccstatus $end
$var parameter 40 q& ecc_pipeline_stage_enabled $end
$var parameter 24 r& operation_mode $end
$var parameter 32 s& byte_size $end
$var parameter 72 t& read_during_write_mode_mixed_ports $end
$var parameter 24 u& ram_block_type $end
$var parameter 312 v& init_file $end
$var parameter 48 w& init_file_layout $end
$var parameter 32 x& maximum_depth $end
$var parameter 48 y& intended_device_family $end
$var parameter 168 z& lpm_hint $end
$var parameter 80 {& lpm_type $end
$var parameter 24 |& implement_in_les $end
$var parameter 40 }& power_up_uninitialized $end
$var parameter 32 ~& family_arria10 $end
$var tri0 1 !' wren_a $end
$var tri0 1 "' wren_b $end
$var tri1 1 #' rden_a $end
$var tri1 1 $' rden_b $end
$var wire 1 %' data_a [31] $end
$var wire 1 &' data_a [30] $end
$var wire 1 '' data_a [29] $end
$var wire 1 (' data_a [28] $end
$var wire 1 )' data_a [27] $end
$var wire 1 *' data_a [26] $end
$var wire 1 +' data_a [25] $end
$var wire 1 ,' data_a [24] $end
$var wire 1 -' data_a [23] $end
$var wire 1 .' data_a [22] $end
$var wire 1 /' data_a [21] $end
$var wire 1 0' data_a [20] $end
$var wire 1 1' data_a [19] $end
$var wire 1 2' data_a [18] $end
$var wire 1 3' data_a [17] $end
$var wire 1 4' data_a [16] $end
$var wire 1 5' data_a [15] $end
$var wire 1 6' data_a [14] $end
$var wire 1 7' data_a [13] $end
$var wire 1 8' data_a [12] $end
$var wire 1 9' data_a [11] $end
$var wire 1 :' data_a [10] $end
$var wire 1 ;' data_a [9] $end
$var wire 1 <' data_a [8] $end
$var wire 1 =' data_a [7] $end
$var wire 1 >' data_a [6] $end
$var wire 1 ?' data_a [5] $end
$var wire 1 @' data_a [4] $end
$var wire 1 A' data_a [3] $end
$var wire 1 B' data_a [2] $end
$var wire 1 C' data_a [1] $end
$var wire 1 D' data_a [0] $end
$var wire 1 E' data_b [0] $end
$var wire 1 Q% address_a [5] $end
$var wire 1 R% address_a [4] $end
$var wire 1 S% address_a [3] $end
$var wire 1 T% address_a [2] $end
$var wire 1 U% address_a [1] $end
$var wire 1 V% address_a [0] $end
$var wire 1 F' address_b [0] $end
$var tri1 1 M" clock0 $end
$var wire 1 G' clock1 $end
$var tri1 1 H' clocken0 $end
$var tri1 1 I' clocken1 $end
$var tri1 1 J' clocken2 $end
$var tri1 1 K' clocken3 $end
$var tri0 1 L' aclr0 $end
$var tri0 1 M' aclr1 $end
$var tri1 1 N' byteena_a [0] $end
$var tri1 1 O' byteena_b [0] $end
$var tri0 1 P' addressstall_a $end
$var tri0 1 Q' addressstall_b $end
$var wire 1 -& q_a [31] $end
$var wire 1 .& q_a [30] $end
$var wire 1 /& q_a [29] $end
$var wire 1 0& q_a [28] $end
$var wire 1 1& q_a [27] $end
$var wire 1 2& q_a [26] $end
$var wire 1 3& q_a [25] $end
$var wire 1 4& q_a [24] $end
$var wire 1 5& q_a [23] $end
$var wire 1 6& q_a [22] $end
$var wire 1 7& q_a [21] $end
$var wire 1 8& q_a [20] $end
$var wire 1 9& q_a [19] $end
$var wire 1 :& q_a [18] $end
$var wire 1 ;& q_a [17] $end
$var wire 1 <& q_a [16] $end
$var wire 1 =& q_a [15] $end
$var wire 1 >& q_a [14] $end
$var wire 1 ?& q_a [13] $end
$var wire 1 @& q_a [12] $end
$var wire 1 A& q_a [11] $end
$var wire 1 B& q_a [10] $end
$var wire 1 C& q_a [9] $end
$var wire 1 D& q_a [8] $end
$var wire 1 E& q_a [7] $end
$var wire 1 F& q_a [6] $end
$var wire 1 G& q_a [5] $end
$var wire 1 H& q_a [4] $end
$var wire 1 I& q_a [3] $end
$var wire 1 J& q_a [2] $end
$var wire 1 K& q_a [1] $end
$var wire 1 L& q_a [0] $end
$var wire 1 R' q_b [0] $end
$var wire 1 S' eccstatus [2] $end
$var wire 1 T' eccstatus [1] $end
$var wire 1 U' eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 V' width_a $end
$var parameter 32 W' widthad_a $end
$var parameter 32 X' numwords_a $end
$var parameter 96 Y' outdata_reg_a $end
$var parameter 32 Z' address_aclr_a $end
$var parameter 32 [' outdata_aclr_a $end
$var parameter 32 \' indata_aclr_a $end
$var parameter 32 ]' wrcontrol_aclr_a $end
$var parameter 32 ^' byteena_aclr_a $end
$var parameter 32 _' width_byteena_a $end
$var parameter 32 `' width_b $end
$var parameter 32 a' widthad_b $end
$var parameter 32 b' numwords_b $end
$var parameter 48 c' rdcontrol_reg_b $end
$var parameter 48 d' address_reg_b $end
$var parameter 96 e' outdata_reg_b $end
$var parameter 32 f' outdata_aclr_b $end
$var parameter 32 g' rdcontrol_aclr_b $end
$var parameter 48 h' indata_reg_b $end
$var parameter 48 i' wrcontrol_wraddress_reg_b $end
$var parameter 48 j' byteena_reg_b $end
$var parameter 32 k' indata_aclr_b $end
$var parameter 32 l' wrcontrol_aclr_b $end
$var parameter 32 m' address_aclr_b $end
$var parameter 32 n' byteena_aclr_b $end
$var parameter 32 o' width_byteena_b $end
$var parameter 48 p' clock_enable_input_a $end
$var parameter 48 q' clock_enable_output_a $end
$var parameter 48 r' clock_enable_input_b $end
$var parameter 48 s' clock_enable_output_b $end
$var parameter 120 t' clock_enable_core_a $end
$var parameter 120 u' clock_enable_core_b $end
$var parameter 160 v' read_during_write_mode_port_a $end
$var parameter 160 w' read_during_write_mode_port_b $end
$var parameter 40 x' enable_ecc $end
$var parameter 32 y' width_eccstatus $end
$var parameter 40 z' ecc_pipeline_stage_enabled $end
$var parameter 24 {' operation_mode $end
$var parameter 32 |' byte_size $end
$var parameter 72 }' read_during_write_mode_mixed_ports $end
$var parameter 24 ~' ram_block_type $end
$var parameter 312 !( init_file $end
$var parameter 48 "( init_file_layout $end
$var parameter 32 #( maximum_depth $end
$var parameter 48 $( intended_device_family $end
$var parameter 168 %( lpm_hint $end
$var parameter 80 &( lpm_type $end
$var parameter 24 '( implement_in_les $end
$var parameter 40 (( power_up_uninitialized $end
$var parameter 24 )( sim_show_memory_data_in_port_b_layout $end
$var parameter 32 *( is_lutram $end
$var parameter 32 +( is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 ,( is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 -( check_simultaneous_read_write $end
$var parameter 32 .( dual_port_addreg_b_clk0 $end
$var parameter 32 /( dual_port_addreg_b_clk1 $end
$var parameter 32 0( i_byte_size_tmp $end
$var parameter 32 1( i_lutram_read $end
$var parameter 32 2( enable_mem_data_b_reading $end
$var parameter 32 3( family_arriav $end
$var parameter 32 4( family_cyclonev $end
$var parameter 32 5( family_base_arriav $end
$var parameter 32 6( family_arria10 $end
$var parameter 32 7( family_stratix10 $end
$var parameter 32 8( family_arriavi $end
$var parameter 32 9( family_nightfury $end
$var parameter 32 :( family_arriavgz $end
$var parameter 32 ;( family_stratixv $end
$var parameter 32 <( family_hardcopyiv $end
$var parameter 32 =( family_hardcopyiii $end
$var parameter 32 >( family_hardcopyii $end
$var parameter 32 ?( family_arriaiigz $end
$var parameter 32 @( family_arriaiigx $end
$var parameter 32 A( family_stratixiii $end
$var parameter 32 B( family_zippleback $end
$var parameter 32 C( family_cycloneiii $end
$var parameter 32 D( family_cyclone $end
$var parameter 32 E( family_base_cycloneii $end
$var parameter 32 F( family_cycloneii $end
$var parameter 32 G( family_base_stratix $end
$var parameter 32 H( family_base_stratixii $end
$var parameter 32 I( family_has_lutram $end
$var parameter 32 J( family_has_stratixv_style_ram $end
$var parameter 32 K( family_has_stratixiii_style_ram $end
$var parameter 32 L( family_has_m512 $end
$var parameter 32 M( family_has_megaram $end
$var parameter 32 N( family_has_stratixi_style_ram $end
$var parameter 32 O( is_write_on_positive_edge $end
$var parameter 32 P( lutram_single_port_fast_read $end
$var parameter 32 Q( lutram_dual_port_fast_read $end
$var parameter 32 R( s3_address_aclr_a $end
$var parameter 32 S( s3_address_aclr_b $end
$var parameter 32 T( i_address_aclr_family_a $end
$var parameter 32 U( i_address_aclr_family_b $end
$var tri0 1 !' wren_a $end
$var tri0 1 "' wren_b $end
$var tri1 1 #' rden_a $end
$var tri1 1 $' rden_b $end
$var wire 1 %' data_a [31] $end
$var wire 1 &' data_a [30] $end
$var wire 1 '' data_a [29] $end
$var wire 1 (' data_a [28] $end
$var wire 1 )' data_a [27] $end
$var wire 1 *' data_a [26] $end
$var wire 1 +' data_a [25] $end
$var wire 1 ,' data_a [24] $end
$var wire 1 -' data_a [23] $end
$var wire 1 .' data_a [22] $end
$var wire 1 /' data_a [21] $end
$var wire 1 0' data_a [20] $end
$var wire 1 1' data_a [19] $end
$var wire 1 2' data_a [18] $end
$var wire 1 3' data_a [17] $end
$var wire 1 4' data_a [16] $end
$var wire 1 5' data_a [15] $end
$var wire 1 6' data_a [14] $end
$var wire 1 7' data_a [13] $end
$var wire 1 8' data_a [12] $end
$var wire 1 9' data_a [11] $end
$var wire 1 :' data_a [10] $end
$var wire 1 ;' data_a [9] $end
$var wire 1 <' data_a [8] $end
$var wire 1 =' data_a [7] $end
$var wire 1 >' data_a [6] $end
$var wire 1 ?' data_a [5] $end
$var wire 1 @' data_a [4] $end
$var wire 1 A' data_a [3] $end
$var wire 1 B' data_a [2] $end
$var wire 1 C' data_a [1] $end
$var wire 1 D' data_a [0] $end
$var wire 1 E' data_b [0] $end
$var wire 1 Q% address_a [5] $end
$var wire 1 R% address_a [4] $end
$var wire 1 S% address_a [3] $end
$var wire 1 T% address_a [2] $end
$var wire 1 U% address_a [1] $end
$var wire 1 V% address_a [0] $end
$var wire 1 F' address_b [0] $end
$var tri1 1 M" clock0 $end
$var wire 1 G' clock1 $end
$var tri1 1 H' clocken0 $end
$var tri1 1 I' clocken1 $end
$var tri1 1 J' clocken2 $end
$var tri1 1 K' clocken3 $end
$var tri0 1 L' aclr0 $end
$var tri0 1 M' aclr1 $end
$var wire 1 N' byteena_a [0] $end
$var wire 1 O' byteena_b [0] $end
$var tri0 1 P' addressstall_a $end
$var tri0 1 Q' addressstall_b $end
$var wire 1 -& q_a [31] $end
$var wire 1 .& q_a [30] $end
$var wire 1 /& q_a [29] $end
$var wire 1 0& q_a [28] $end
$var wire 1 1& q_a [27] $end
$var wire 1 2& q_a [26] $end
$var wire 1 3& q_a [25] $end
$var wire 1 4& q_a [24] $end
$var wire 1 5& q_a [23] $end
$var wire 1 6& q_a [22] $end
$var wire 1 7& q_a [21] $end
$var wire 1 8& q_a [20] $end
$var wire 1 9& q_a [19] $end
$var wire 1 :& q_a [18] $end
$var wire 1 ;& q_a [17] $end
$var wire 1 <& q_a [16] $end
$var wire 1 =& q_a [15] $end
$var wire 1 >& q_a [14] $end
$var wire 1 ?& q_a [13] $end
$var wire 1 @& q_a [12] $end
$var wire 1 A& q_a [11] $end
$var wire 1 B& q_a [10] $end
$var wire 1 C& q_a [9] $end
$var wire 1 D& q_a [8] $end
$var wire 1 E& q_a [7] $end
$var wire 1 F& q_a [6] $end
$var wire 1 G& q_a [5] $end
$var wire 1 H& q_a [4] $end
$var wire 1 I& q_a [3] $end
$var wire 1 J& q_a [2] $end
$var wire 1 K& q_a [1] $end
$var wire 1 L& q_a [0] $end
$var wire 1 R' q_b [0] $end
$var wire 1 S' eccstatus [2] $end
$var wire 1 T' eccstatus [1] $end
$var wire 1 U' eccstatus [0] $end
$var reg 32 V( i_data_reg_a [31:0] $end
$var reg 32 W( temp_wa [31:0] $end
$var reg 32 X( temp_wa2 [31:0] $end
$var reg 32 Y( temp_wa2b [31:0] $end
$var reg 32 Z( init_temp [31:0] $end
$var reg 1 [( i_data_reg_b [0:0] $end
$var reg 1 \( temp_wb [0:0] $end
$var reg 1 ]( temp_wb2 [0:0] $end
$var reg 1 ^( temp $end
$var reg 32 _( i_q_reg_a [31:0] $end
$var reg 32 `( i_q_tmp_a [31:0] $end
$var reg 32 a( i_q_tmp2_a [31:0] $end
$var reg 1 b( i_q_reg_b [0:0] $end
$var reg 1 c( i_q_tmp_b [0:0] $end
$var reg 1 d( i_q_tmp2_b [0:0] $end
$var reg 1 e( i_q_output_latch [0:0] $end
$var reg 32 f( i_byteena_mask_reg_a [31:0] $end
$var reg 1 g( i_byteena_mask_reg_b [0:0] $end
$var reg 6 h( i_address_reg_a [5:0] $end
$var reg 1 i( i_address_reg_b [0:0] $end
$var reg 1 j( i_q_ecc_reg_b [0:0] $end
$var reg 1 k( i_q_ecc_tmp_b [0:0] $end
$var reg 6 l( i_original_address_a [5:0] $end
$var reg 32 m( i_byteena_mask_reg_a_tmp [31:0] $end
$var reg 1 n( i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 32 o( i_byteena_mask_reg_a_out [31:0] $end
$var reg 1 p( i_byteena_mask_reg_b_out [0:0] $end
$var reg 32 q( i_byteena_mask_reg_a_x [31:0] $end
$var reg 1 r( i_byteena_mask_reg_b_x [0:0] $end
$var reg 32 s( i_byteena_mask_reg_a_out_b [31:0] $end
$var reg 1 t( i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 u( ram_initf [2048:1] $end
$var reg 1 v( i_wren_reg_a $end
$var reg 1 w( i_wren_reg_b $end
$var reg 1 x( i_rden_reg_a $end
$var reg 1 y( i_rden_reg_b $end
$var reg 1 z( i_read_flag_a $end
$var reg 1 {( i_read_flag_b $end
$var reg 1 |( i_write_flag_a $end
$var reg 1 }( i_write_flag_b $end
$var reg 1 ~( good_to_go_a $end
$var reg 1 !) good_to_go_b $end
$var reg 32 ") file_desc [31:0] $end
$var reg 1 #) init_file_b_port $end
$var reg 1 $) i_nmram_write_a $end
$var reg 1 %) i_nmram_write_b $end
$var reg 32 &) wa_mult_x [31:0] $end
$var reg 32 ') wa_mult_x_ii [31:0] $end
$var reg 32 () wa_mult_x_iii [31:0] $end
$var reg 38 )) add_reg_a_mult_wa [37:0] $end
$var reg 2 *) add_reg_b_mult_wb [1:0] $end
$var reg 38 +) add_reg_a_mult_wa_pl_wa [37:0] $end
$var reg 2 ,) add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 -) same_clock_pulse0 $end
$var reg 1 .) same_clock_pulse1 $end
$var reg 1 /) i_original_data_b [0:0] $end
$var reg 32 0) i_original_data_a [31:0] $end
$var reg 1 1) i_address_aclr_a_flag $end
$var reg 1 2) i_address_aclr_a_prev $end
$var reg 1 3) i_address_aclr_b_flag $end
$var reg 1 4) i_address_aclr_b_prev $end
$var reg 1 5) i_outdata_aclr_a_prev $end
$var reg 1 6) i_outdata_aclr_b_prev $end
$var reg 1 7) i_force_reread_a $end
$var reg 1 8) i_force_reread_a1 $end
$var reg 1 9) i_force_reread_b $end
$var reg 1 :) i_force_reread_b1 $end
$var reg 1 ;) i_force_reread_a_signal $end
$var reg 1 <) i_force_reread_b_signal $end
$var reg 169 =) cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 >) i_ram_block_type [56:0] $end
$var integer 32 ?) i_byte_size $end
$var wire 1 @) i_good_to_write_a $end
$var wire 1 A) i_good_to_write_b $end
$var reg 1 B) i_good_to_write_a2 $end
$var reg 1 C) i_good_to_write_b2 $end
$var reg 1 D) i_core_clocken_a_reg $end
$var reg 1 E) i_core_clocken0_b_reg $end
$var reg 1 F) i_core_clocken1_b_reg $end
$var wire 1 G) i_indata_aclr_a $end
$var wire 1 H) i_address_aclr_a $end
$var wire 1 I) i_wrcontrol_aclr_a $end
$var wire 1 J) i_indata_aclr_b $end
$var wire 1 K) i_address_aclr_b $end
$var wire 1 L) i_wrcontrol_aclr_b $end
$var wire 1 M) i_outdata_aclr_a $end
$var wire 1 N) i_outdata_aclr_b $end
$var wire 1 O) i_rdcontrol_aclr_b $end
$var wire 1 P) i_byteena_aclr_a $end
$var wire 1 Q) i_byteena_aclr_b $end
$var wire 1 R) i_outdata_clken_a $end
$var wire 1 S) i_outdata_clken_b $end
$var wire 1 T) i_outlatch_clken_a $end
$var wire 1 U) i_outlatch_clken_b $end
$var wire 1 V) i_clocken0 $end
$var wire 1 W) i_clocken1_b $end
$var wire 1 X) i_clocken0_b $end
$var wire 1 Y) i_core_clocken_a $end
$var wire 1 Z) i_core_clocken_b $end
$var wire 1 [) i_core_clocken0_b $end
$var wire 1 \) i_core_clocken1_b $end
$var tri1 1 ]) i_byteena_a [0] $end
$var tri1 1 ^) i_byteena_b [0] $end
$var integer 32 _) i_numwords_a $end
$var integer 32 `) i_numwords_b $end
$var integer 32 a) i_aclr_flag_a $end
$var integer 32 b) i_aclr_flag_b $end
$var integer 32 c) i_q_tmp2_a_idx $end
$var integer 32 d) init_i $end
$var integer 32 e) i $end
$var integer 32 f) i2 $end
$var integer 32 g) i3 $end
$var integer 32 h) i4 $end
$var integer 32 i) i5 $end
$var integer 32 j) j $end
$var integer 32 k) j2 $end
$var integer 32 l) j3 $end
$var integer 32 m) k $end
$var integer 32 n) k2 $end
$var integer 32 o) k3 $end
$var integer 32 p) k4 $end
$var integer 32 q) i_div_wa $end
$var integer 32 r) i_div_wb $end
$var integer 32 s) j_plus_i2 $end
$var integer 32 t) j2_plus_i5 $end
$var integer 32 u) j3_plus_i5 $end
$var integer 32 v) j_plus_i2_div_a $end
$var integer 32 w) j2_plus_i5_div_a $end
$var integer 32 x) j3_plus_i5_div_a $end
$var integer 32 y) j3_plus_i5_div_b $end
$var integer 32 z) i_byteena_count $end
$var integer 32 {) port_a_bit_count_low $end
$var integer 32 |) port_a_bit_count_high $end
$var integer 32 }) port_b_bit_count_low $end
$var integer 32 ~) port_b_bit_count_high $end
$var time 64 !* i_data_write_time_a $end
$var time 64 "* i_data_write_time_b $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 #* IS_FAMILY_ARRIA10 $end
$var reg 160 $* device [160:1] $end
$var reg 1 %* is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 &* IS_FAMILY_ARRIAGX $end
$var reg 160 '* device [160:1] $end
$var reg 1 (* is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 )* IS_FAMILY_ARRIAIIGX $end
$var reg 160 ** device [160:1] $end
$var reg 1 +* is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 ,* IS_FAMILY_ARRIAIIGZ $end
$var reg 160 -* device [160:1] $end
$var reg 1 .* is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 /* IS_FAMILY_ARRIAVGZ $end
$var reg 160 0* device [160:1] $end
$var reg 1 1* is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 2* IS_FAMILY_ARRIAV $end
$var reg 160 3* device [160:1] $end
$var reg 1 4* is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 5* IS_FAMILY_CYCLONE10LP $end
$var reg 160 6* device [160:1] $end
$var reg 1 7* is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 8* IS_FAMILY_CYCLONEII $end
$var reg 160 9* device [160:1] $end
$var reg 1 :* is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 ;* IS_FAMILY_CYCLONEIIILS $end
$var reg 160 <* device [160:1] $end
$var reg 1 =* is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 >* IS_FAMILY_CYCLONEIII $end
$var reg 160 ?* device [160:1] $end
$var reg 1 @* is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 A* IS_FAMILY_CYCLONEIVE $end
$var reg 160 B* device [160:1] $end
$var reg 1 C* is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 D* IS_FAMILY_CYCLONEIVGX $end
$var reg 160 E* device [160:1] $end
$var reg 1 F* is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 G* IS_FAMILY_CYCLONEV $end
$var reg 160 H* device [160:1] $end
$var reg 1 I* is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 J* IS_FAMILY_CYCLONE $end
$var reg 160 K* device [160:1] $end
$var reg 1 L* is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 M* IS_FAMILY_HARDCOPYII $end
$var reg 160 N* device [160:1] $end
$var reg 1 O* is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 P* IS_FAMILY_HARDCOPYIII $end
$var reg 160 Q* device [160:1] $end
$var reg 1 R* is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 S* IS_FAMILY_HARDCOPYIV $end
$var reg 160 T* device [160:1] $end
$var reg 1 U* is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 V* IS_FAMILY_MAX10 $end
$var reg 160 W* device [160:1] $end
$var reg 1 X* is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 Y* IS_FAMILY_MAXII $end
$var reg 160 Z* device [160:1] $end
$var reg 1 [* is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 \* IS_FAMILY_MAXV $end
$var reg 160 ]* device [160:1] $end
$var reg 1 ^* is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 _* IS_FAMILY_STRATIX10 $end
$var reg 160 `* device [160:1] $end
$var reg 1 a* is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 b* IS_FAMILY_STRATIXGX $end
$var reg 160 c* device [160:1] $end
$var reg 1 d* is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 e* IS_FAMILY_STRATIXIIGX $end
$var reg 160 f* device [160:1] $end
$var reg 1 g* is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 h* IS_FAMILY_STRATIXII $end
$var reg 160 i* device [160:1] $end
$var reg 1 j* is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 k* IS_FAMILY_STRATIXIII $end
$var reg 160 l* device [160:1] $end
$var reg 1 m* is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 n* IS_FAMILY_STRATIXIV $end
$var reg 160 o* device [160:1] $end
$var reg 1 p* is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 q* IS_FAMILY_STRATIXV $end
$var reg 160 r* device [160:1] $end
$var reg 1 s* is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 t* IS_FAMILY_STRATIX $end
$var reg 160 u* device [160:1] $end
$var reg 1 v* is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 w* FEATURE_FAMILY_STRATIXGX $end
$var reg 160 x* device [160:1] $end
$var reg 1 y* var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 z* FEATURE_FAMILY_CYCLONE $end
$var reg 160 {* device [160:1] $end
$var reg 1 |* var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 }* FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 ~* device [160:1] $end
$var reg 1 !+ var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 "+ FEATURE_FAMILY_STRATIXIII $end
$var reg 160 #+ device [160:1] $end
$var reg 1 $+ var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 %+ FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 &+ device [160:1] $end
$var reg 1 '+ var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 (+ FEATURE_FAMILY_STRATIXV $end
$var reg 160 )+ device [160:1] $end
$var reg 1 *+ var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 ++ FEATURE_FAMILY_ARRIA10 $end
$var reg 160 ,+ device [160:1] $end
$var reg 1 -+ var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 .+ FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 /+ device [160:1] $end
$var reg 1 0+ var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 1+ FEATURE_FAMILY_STRATIXII $end
$var reg 160 2+ device [160:1] $end
$var reg 1 3+ var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 4+ FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 5+ device [160:1] $end
$var reg 1 6+ var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 7+ FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 8+ device [160:1] $end
$var reg 1 9+ var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 :+ FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 ;+ device [160:1] $end
$var reg 1 <+ var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 =+ FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 >+ device [160:1] $end
$var reg 1 ?+ var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 @+ FEATURE_FAMILY_STRATIX $end
$var reg 160 A+ device [160:1] $end
$var reg 1 B+ var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 C+ FEATURE_FAMILY_MAXII $end
$var reg 160 D+ device [160:1] $end
$var reg 1 E+ var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 F+ FEATURE_FAMILY_MAXV $end
$var reg 160 G+ device [160:1] $end
$var reg 1 H+ var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 I+ FEATURE_FAMILY_CYCLONEII $end
$var reg 160 J+ device [160:1] $end
$var reg 1 K+ var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 L+ FEATURE_FAMILY_STRATIXIV $end
$var reg 160 M+ device [160:1] $end
$var reg 1 N+ var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 O+ FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 P+ device [160:1] $end
$var reg 1 Q+ var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 R+ FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 S+ device [160:1] $end
$var reg 1 T+ var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 U+ FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 V+ device [160:1] $end
$var reg 1 W+ var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 X+ FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 Y+ device [160:1] $end
$var reg 1 Z+ var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 [+ FEATURE_FAMILY_CYCLONEV $end
$var reg 160 \+ device [160:1] $end
$var reg 1 ]+ var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 ^+ FEATURE_FAMILY_ARRIAV $end
$var reg 160 _+ device [160:1] $end
$var reg 1 `+ var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 a+ FEATURE_FAMILY_MAX10 $end
$var reg 160 b+ device [160:1] $end
$var reg 1 c+ var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 d+ FEATURE_FAMILY_STRATIX10 $end
$var reg 160 e+ device [160:1] $end
$var reg 1 f+ var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 g+ FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 h+ device [160:1] $end
$var reg 1 i+ var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 j+ FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 k+ device [160:1] $end
$var reg 1 l+ var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 m+ FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 n+ device [160:1] $end
$var reg 1 o+ var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 p+ FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 q+ device [160:1] $end
$var reg 1 r+ var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 s+ FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 t+ device [160:1] $end
$var reg 1 u+ var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 v+ FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 w+ device [160:1] $end
$var reg 1 x+ var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 y+ FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 z+ device [160:1] $end
$var reg 1 {+ var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 |+ FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 }+ device [160:1] $end
$var reg 1 ~+ var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 !, FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 ", device [160:1] $end
$var reg 1 #, var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 $, FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 %, device [160:1] $end
$var reg 1 &, var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 ', FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 (, device [160:1] $end
$var reg 1 ), var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 *, IS_VALID_FAMILY $end
$var reg 160 +, device [160:1] $end
$var reg 1 ,, is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 -, tolower [8:1] $end
$var reg 8 ., given_character [8:1] $end
$var reg 8 /, conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 0, ecc_parity [7:0] $end
$var reg 8 1, i_eccencparity [7:0] $end
$var integer 32 2, pointer $end
$var integer 32 3, pointer_max $end
$var integer 32 4, pointer_min $end
$var integer 32 5, flag_err $end
$var integer 32 6, flag $end
$var integer 32 7, flag_double $end
$var integer 32 8, flag_triple $end
$var integer 32 9, flag_single $end
$var integer 32 :, flag_no_err $end
$var integer 32 ;, flag_uncorr $end
$var integer 32 <, n $end
$var integer 32 =, err $end
$var integer 32 >, found $end
$var integer 32 ?, found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 @, in_file [2048:1] $end
$var integer 32 A, width $end
$var reg 2048 B, out_file [2048:1] $end
$var reg 2048 C, buffer [2048:1] $end
$var reg 1025 D, memory_data1 [1024:0] $end
$var reg 1025 E, memory_data2 [1024:0] $end
$var reg 8 F, c [8:1] $end
$var reg 4 G, hex [3:0] $end
$var reg 4 H, tmp_char [3:0] $end
$var reg 24 I, address_radix [24:1] $end
$var reg 24 J, data_radix [24:1] $end
$var reg 1 K, get_width $end
$var reg 1 L, get_depth $end
$var reg 1 M, get_data_radix $end
$var reg 1 N, get_address_radix $end
$var reg 1 O, width_found $end
$var reg 1 P, depth_found $end
$var reg 1 Q, data_radix_found $end
$var reg 1 R, address_radix_found $end
$var reg 1 S, get_address_data_pairs $end
$var reg 1 T, get_address $end
$var reg 1 U, get_data $end
$var reg 1 V, display_address $end
$var reg 1 W, invalid_address $end
$var reg 1 X, get_start_address $end
$var reg 1 Y, get_end_address $end
$var reg 1 Z, done $end
$var reg 1 [, error_status $end
$var reg 1 \, first_rec $end
$var reg 1 ], last_rec $end
$var integer 32 ^, memory_width $end
$var integer 32 _, memory_depth $end
$var integer 32 `, value $end
$var integer 32 a, ifp $end
$var integer 32 b, ofp $end
$var integer 32 c, r $end
$var integer 32 d, r2 $end
$var integer 32 e, i $end
$var integer 32 f, j $end
$var integer 32 g, k $end
$var integer 32 h, m $end
$var integer 32 i, n $end
$var integer 32 j, negative $end
$var integer 32 k, off_addr $end
$var integer 32 l, nn $end
$var integer 32 m, address $end
$var integer 32 n, tt $end
$var integer 32 o, cc $end
$var integer 32 p, aah $end
$var integer 32 q, aal $end
$var integer 32 r, dd $end
$var integer 32 s, sum $end
$var integer 32 t, start_address $end
$var integer 32 u, end_address $end
$var integer 32 v, line_no $end
$var integer 32 w, character_count $end
$var integer 32 x, comment_with_percent_found $end
$var integer 32 y, comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 z, in_file [2048:1] $end
$var integer 32 {, width $end
$var reg 2048 |, out_file [2048:1] $end
$var reg 8 }, c [8:1] $end
$var reg 4 ~, hex [3:0] $end
$var reg 4 !- tmp_char [3:0] $end
$var reg 1 "- done $end
$var reg 1 #- error_status $end
$var reg 1 $- first_rec $end
$var reg 1 %- last_rec $end
$var reg 1 &- first_normal_record $end
$var reg 1 '- is_word_address_format $end
$var integer 32 (- ifp $end
$var integer 32 )- ofp $end
$var integer 32 *- r $end
$var integer 32 +- r2 $end
$var integer 32 ,- i $end
$var integer 32 -- j $end
$var integer 32 .- k $end
$var integer 32 /- m $end
$var integer 32 0- n $end
$var integer 32 1- off_addr $end
$var integer 32 2- nn $end
$var integer 32 3- aaaa $end
$var integer 32 4- aaaa_pre $end
$var integer 32 5- tt $end
$var integer 32 6- cc $end
$var integer 32 7- aah $end
$var integer 32 8- aal $end
$var integer 32 9- dd $end
$var integer 32 :- sum $end
$var integer 32 ;- line_no $end
$var integer 32 <- divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 =- in_file [2048:1] $end
$var integer 32 >- width $end
$var reg 2048 ?- out_file [2048:1] $end
$upscope $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module CU $end
$var parameter 6 @- _RType $end
$var parameter 6 A- _addi $end
$var parameter 6 B- _lw $end
$var parameter 6 C- _sw $end
$var parameter 6 D- _beq $end
$var parameter 6 E- _add_ $end
$var parameter 6 F- _sub_ $end
$var parameter 6 G- _and_ $end
$var parameter 6 H- _or_ $end
$var parameter 6 I- _slt_ $end
$var wire 1 E% opCode [5] $end
$var wire 1 F% opCode [4] $end
$var wire 1 G% opCode [3] $end
$var wire 1 H% opCode [2] $end
$var wire 1 I% opCode [1] $end
$var wire 1 J% opCode [0] $end
$var wire 1 K% funct [5] $end
$var wire 1 L% funct [4] $end
$var wire 1 M% funct [3] $end
$var wire 1 N% funct [2] $end
$var wire 1 O% funct [1] $end
$var wire 1 P% funct [0] $end
$var wire 1 N" rst $end
$var reg 1 J- RegDst $end
$var reg 1 K- Branch $end
$var reg 1 L- MemReadEn $end
$var reg 1 M- MemtoReg $end
$var reg 1 N- MemWriteEn $end
$var reg 1 O- RegWriteEn $end
$var reg 1 P- ALUSrc $end
$var reg 3 Q- ALUOp [2:0] $end
$upscope $end

$scope module RFMux $end
$var parameter 32 R- size $end
$var wire 1 z% s $end
$var wire 1 h% in1 [4] $end
$var wire 1 i% in1 [3] $end
$var wire 1 j% in1 [2] $end
$var wire 1 k% in1 [1] $end
$var wire 1 l% in1 [0] $end
$var wire 1 m% in2 [4] $end
$var wire 1 n% in2 [3] $end
$var wire 1 o% in2 [2] $end
$var wire 1 p% in2 [1] $end
$var wire 1 q% in2 [0] $end
$var wire 1 r% out [4] $end
$var wire 1 s% out [3] $end
$var wire 1 t% out [2] $end
$var wire 1 u% out [1] $end
$var wire 1 v% out [0] $end
$upscope $end

$scope module RF $end
$var wire 1 M" clk $end
$var wire 1 N" rst $end
$var wire 1 !& we $end
$var wire 1 c% readRegister1 [4] $end
$var wire 1 d% readRegister1 [3] $end
$var wire 1 e% readRegister1 [2] $end
$var wire 1 f% readRegister1 [1] $end
$var wire 1 g% readRegister1 [0] $end
$var wire 1 h% readRegister2 [4] $end
$var wire 1 i% readRegister2 [3] $end
$var wire 1 j% readRegister2 [2] $end
$var wire 1 k% readRegister2 [1] $end
$var wire 1 l% readRegister2 [0] $end
$var wire 1 r% writeRegister [4] $end
$var wire 1 s% writeRegister [3] $end
$var wire 1 t% writeRegister [2] $end
$var wire 1 u% writeRegister [1] $end
$var wire 1 v% writeRegister [0] $end
$var wire 1 o" writeData [31] $end
$var wire 1 p" writeData [30] $end
$var wire 1 q" writeData [29] $end
$var wire 1 r" writeData [28] $end
$var wire 1 s" writeData [27] $end
$var wire 1 t" writeData [26] $end
$var wire 1 u" writeData [25] $end
$var wire 1 v" writeData [24] $end
$var wire 1 w" writeData [23] $end
$var wire 1 x" writeData [22] $end
$var wire 1 y" writeData [21] $end
$var wire 1 z" writeData [20] $end
$var wire 1 {" writeData [19] $end
$var wire 1 |" writeData [18] $end
$var wire 1 }" writeData [17] $end
$var wire 1 ~" writeData [16] $end
$var wire 1 !# writeData [15] $end
$var wire 1 "# writeData [14] $end
$var wire 1 ## writeData [13] $end
$var wire 1 $# writeData [12] $end
$var wire 1 %# writeData [11] $end
$var wire 1 &# writeData [10] $end
$var wire 1 '# writeData [9] $end
$var wire 1 (# writeData [8] $end
$var wire 1 )# writeData [7] $end
$var wire 1 *# writeData [6] $end
$var wire 1 +# writeData [5] $end
$var wire 1 ,# writeData [4] $end
$var wire 1 -# writeData [3] $end
$var wire 1 .# writeData [2] $end
$var wire 1 /# writeData [1] $end
$var wire 1 0# writeData [0] $end
$var wire 1 I regs0 [31] $end
$var wire 1 J regs0 [30] $end
$var wire 1 K regs0 [29] $end
$var wire 1 L regs0 [28] $end
$var wire 1 M regs0 [27] $end
$var wire 1 N regs0 [26] $end
$var wire 1 O regs0 [25] $end
$var wire 1 P regs0 [24] $end
$var wire 1 Q regs0 [23] $end
$var wire 1 R regs0 [22] $end
$var wire 1 S regs0 [21] $end
$var wire 1 T regs0 [20] $end
$var wire 1 U regs0 [19] $end
$var wire 1 V regs0 [18] $end
$var wire 1 W regs0 [17] $end
$var wire 1 X regs0 [16] $end
$var wire 1 Y regs0 [15] $end
$var wire 1 Z regs0 [14] $end
$var wire 1 [ regs0 [13] $end
$var wire 1 \ regs0 [12] $end
$var wire 1 ] regs0 [11] $end
$var wire 1 ^ regs0 [10] $end
$var wire 1 _ regs0 [9] $end
$var wire 1 ` regs0 [8] $end
$var wire 1 a regs0 [7] $end
$var wire 1 b regs0 [6] $end
$var wire 1 c regs0 [5] $end
$var wire 1 d regs0 [4] $end
$var wire 1 e regs0 [3] $end
$var wire 1 f regs0 [2] $end
$var wire 1 g regs0 [1] $end
$var wire 1 h regs0 [0] $end
$var wire 1 i regs1 [31] $end
$var wire 1 j regs1 [30] $end
$var wire 1 k regs1 [29] $end
$var wire 1 l regs1 [28] $end
$var wire 1 m regs1 [27] $end
$var wire 1 n regs1 [26] $end
$var wire 1 o regs1 [25] $end
$var wire 1 p regs1 [24] $end
$var wire 1 q regs1 [23] $end
$var wire 1 r regs1 [22] $end
$var wire 1 s regs1 [21] $end
$var wire 1 t regs1 [20] $end
$var wire 1 u regs1 [19] $end
$var wire 1 v regs1 [18] $end
$var wire 1 w regs1 [17] $end
$var wire 1 x regs1 [16] $end
$var wire 1 y regs1 [15] $end
$var wire 1 z regs1 [14] $end
$var wire 1 { regs1 [13] $end
$var wire 1 | regs1 [12] $end
$var wire 1 } regs1 [11] $end
$var wire 1 ~ regs1 [10] $end
$var wire 1 !! regs1 [9] $end
$var wire 1 "! regs1 [8] $end
$var wire 1 #! regs1 [7] $end
$var wire 1 $! regs1 [6] $end
$var wire 1 %! regs1 [5] $end
$var wire 1 &! regs1 [4] $end
$var wire 1 '! regs1 [3] $end
$var wire 1 (! regs1 [2] $end
$var wire 1 )! regs1 [1] $end
$var wire 1 *! regs1 [0] $end
$var wire 1 +! regs2 [31] $end
$var wire 1 ,! regs2 [30] $end
$var wire 1 -! regs2 [29] $end
$var wire 1 .! regs2 [28] $end
$var wire 1 /! regs2 [27] $end
$var wire 1 0! regs2 [26] $end
$var wire 1 1! regs2 [25] $end
$var wire 1 2! regs2 [24] $end
$var wire 1 3! regs2 [23] $end
$var wire 1 4! regs2 [22] $end
$var wire 1 5! regs2 [21] $end
$var wire 1 6! regs2 [20] $end
$var wire 1 7! regs2 [19] $end
$var wire 1 8! regs2 [18] $end
$var wire 1 9! regs2 [17] $end
$var wire 1 :! regs2 [16] $end
$var wire 1 ;! regs2 [15] $end
$var wire 1 <! regs2 [14] $end
$var wire 1 =! regs2 [13] $end
$var wire 1 >! regs2 [12] $end
$var wire 1 ?! regs2 [11] $end
$var wire 1 @! regs2 [10] $end
$var wire 1 A! regs2 [9] $end
$var wire 1 B! regs2 [8] $end
$var wire 1 C! regs2 [7] $end
$var wire 1 D! regs2 [6] $end
$var wire 1 E! regs2 [5] $end
$var wire 1 F! regs2 [4] $end
$var wire 1 G! regs2 [3] $end
$var wire 1 H! regs2 [2] $end
$var wire 1 I! regs2 [1] $end
$var wire 1 J! regs2 [0] $end
$var wire 1 K! regs3 [31] $end
$var wire 1 L! regs3 [30] $end
$var wire 1 M! regs3 [29] $end
$var wire 1 N! regs3 [28] $end
$var wire 1 O! regs3 [27] $end
$var wire 1 P! regs3 [26] $end
$var wire 1 Q! regs3 [25] $end
$var wire 1 R! regs3 [24] $end
$var wire 1 S! regs3 [23] $end
$var wire 1 T! regs3 [22] $end
$var wire 1 U! regs3 [21] $end
$var wire 1 V! regs3 [20] $end
$var wire 1 W! regs3 [19] $end
$var wire 1 X! regs3 [18] $end
$var wire 1 Y! regs3 [17] $end
$var wire 1 Z! regs3 [16] $end
$var wire 1 [! regs3 [15] $end
$var wire 1 \! regs3 [14] $end
$var wire 1 ]! regs3 [13] $end
$var wire 1 ^! regs3 [12] $end
$var wire 1 _! regs3 [11] $end
$var wire 1 `! regs3 [10] $end
$var wire 1 a! regs3 [9] $end
$var wire 1 b! regs3 [8] $end
$var wire 1 c! regs3 [7] $end
$var wire 1 d! regs3 [6] $end
$var wire 1 e! regs3 [5] $end
$var wire 1 f! regs3 [4] $end
$var wire 1 g! regs3 [3] $end
$var wire 1 h! regs3 [2] $end
$var wire 1 i! regs3 [1] $end
$var wire 1 j! regs3 [0] $end
$var wire 1 k! regs4 [31] $end
$var wire 1 l! regs4 [30] $end
$var wire 1 m! regs4 [29] $end
$var wire 1 n! regs4 [28] $end
$var wire 1 o! regs4 [27] $end
$var wire 1 p! regs4 [26] $end
$var wire 1 q! regs4 [25] $end
$var wire 1 r! regs4 [24] $end
$var wire 1 s! regs4 [23] $end
$var wire 1 t! regs4 [22] $end
$var wire 1 u! regs4 [21] $end
$var wire 1 v! regs4 [20] $end
$var wire 1 w! regs4 [19] $end
$var wire 1 x! regs4 [18] $end
$var wire 1 y! regs4 [17] $end
$var wire 1 z! regs4 [16] $end
$var wire 1 {! regs4 [15] $end
$var wire 1 |! regs4 [14] $end
$var wire 1 }! regs4 [13] $end
$var wire 1 ~! regs4 [12] $end
$var wire 1 !" regs4 [11] $end
$var wire 1 "" regs4 [10] $end
$var wire 1 #" regs4 [9] $end
$var wire 1 $" regs4 [8] $end
$var wire 1 %" regs4 [7] $end
$var wire 1 &" regs4 [6] $end
$var wire 1 '" regs4 [5] $end
$var wire 1 (" regs4 [4] $end
$var wire 1 )" regs4 [3] $end
$var wire 1 *" regs4 [2] $end
$var wire 1 +" regs4 [1] $end
$var wire 1 ," regs4 [0] $end
$var wire 1 -" regs5 [31] $end
$var wire 1 ." regs5 [30] $end
$var wire 1 /" regs5 [29] $end
$var wire 1 0" regs5 [28] $end
$var wire 1 1" regs5 [27] $end
$var wire 1 2" regs5 [26] $end
$var wire 1 3" regs5 [25] $end
$var wire 1 4" regs5 [24] $end
$var wire 1 5" regs5 [23] $end
$var wire 1 6" regs5 [22] $end
$var wire 1 7" regs5 [21] $end
$var wire 1 8" regs5 [20] $end
$var wire 1 9" regs5 [19] $end
$var wire 1 :" regs5 [18] $end
$var wire 1 ;" regs5 [17] $end
$var wire 1 <" regs5 [16] $end
$var wire 1 =" regs5 [15] $end
$var wire 1 >" regs5 [14] $end
$var wire 1 ?" regs5 [13] $end
$var wire 1 @" regs5 [12] $end
$var wire 1 A" regs5 [11] $end
$var wire 1 B" regs5 [10] $end
$var wire 1 C" regs5 [9] $end
$var wire 1 D" regs5 [8] $end
$var wire 1 E" regs5 [7] $end
$var wire 1 F" regs5 [6] $end
$var wire 1 G" regs5 [5] $end
$var wire 1 H" regs5 [4] $end
$var wire 1 I" regs5 [3] $end
$var wire 1 J" regs5 [2] $end
$var wire 1 K" regs5 [1] $end
$var wire 1 L" regs5 [0] $end
$var wire 1 1# readData1 [31] $end
$var wire 1 2# readData1 [30] $end
$var wire 1 3# readData1 [29] $end
$var wire 1 4# readData1 [28] $end
$var wire 1 5# readData1 [27] $end
$var wire 1 6# readData1 [26] $end
$var wire 1 7# readData1 [25] $end
$var wire 1 8# readData1 [24] $end
$var wire 1 9# readData1 [23] $end
$var wire 1 :# readData1 [22] $end
$var wire 1 ;# readData1 [21] $end
$var wire 1 <# readData1 [20] $end
$var wire 1 =# readData1 [19] $end
$var wire 1 ># readData1 [18] $end
$var wire 1 ?# readData1 [17] $end
$var wire 1 @# readData1 [16] $end
$var wire 1 A# readData1 [15] $end
$var wire 1 B# readData1 [14] $end
$var wire 1 C# readData1 [13] $end
$var wire 1 D# readData1 [12] $end
$var wire 1 E# readData1 [11] $end
$var wire 1 F# readData1 [10] $end
$var wire 1 G# readData1 [9] $end
$var wire 1 H# readData1 [8] $end
$var wire 1 I# readData1 [7] $end
$var wire 1 J# readData1 [6] $end
$var wire 1 K# readData1 [5] $end
$var wire 1 L# readData1 [4] $end
$var wire 1 M# readData1 [3] $end
$var wire 1 N# readData1 [2] $end
$var wire 1 O# readData1 [1] $end
$var wire 1 P# readData1 [0] $end
$var wire 1 Q# readData2 [31] $end
$var wire 1 R# readData2 [30] $end
$var wire 1 S# readData2 [29] $end
$var wire 1 T# readData2 [28] $end
$var wire 1 U# readData2 [27] $end
$var wire 1 V# readData2 [26] $end
$var wire 1 W# readData2 [25] $end
$var wire 1 X# readData2 [24] $end
$var wire 1 Y# readData2 [23] $end
$var wire 1 Z# readData2 [22] $end
$var wire 1 [# readData2 [21] $end
$var wire 1 \# readData2 [20] $end
$var wire 1 ]# readData2 [19] $end
$var wire 1 ^# readData2 [18] $end
$var wire 1 _# readData2 [17] $end
$var wire 1 `# readData2 [16] $end
$var wire 1 a# readData2 [15] $end
$var wire 1 b# readData2 [14] $end
$var wire 1 c# readData2 [13] $end
$var wire 1 d# readData2 [12] $end
$var wire 1 e# readData2 [11] $end
$var wire 1 f# readData2 [10] $end
$var wire 1 g# readData2 [9] $end
$var wire 1 h# readData2 [8] $end
$var wire 1 i# readData2 [7] $end
$var wire 1 j# readData2 [6] $end
$var wire 1 k# readData2 [5] $end
$var wire 1 l# readData2 [4] $end
$var wire 1 m# readData2 [3] $end
$var wire 1 n# readData2 [2] $end
$var wire 1 o# readData2 [1] $end
$var wire 1 p# readData2 [0] $end

$scope begin Write_on_register_file_block $end
$var integer 32 S- i $end
$upscope $end
$upscope $end

$scope module SignExtend $end
$var wire 1 5% in [15] $end
$var wire 1 6% in [14] $end
$var wire 1 7% in [13] $end
$var wire 1 8% in [12] $end
$var wire 1 9% in [11] $end
$var wire 1 :% in [10] $end
$var wire 1 ;% in [9] $end
$var wire 1 <% in [8] $end
$var wire 1 =% in [7] $end
$var wire 1 >% in [6] $end
$var wire 1 ?% in [5] $end
$var wire 1 @% in [4] $end
$var wire 1 A% in [3] $end
$var wire 1 B% in [2] $end
$var wire 1 C% in [1] $end
$var wire 1 D% in [0] $end
$var wire 1 q# out [31] $end
$var wire 1 r# out [30] $end
$var wire 1 s# out [29] $end
$var wire 1 t# out [28] $end
$var wire 1 u# out [27] $end
$var wire 1 v# out [26] $end
$var wire 1 w# out [25] $end
$var wire 1 x# out [24] $end
$var wire 1 y# out [23] $end
$var wire 1 z# out [22] $end
$var wire 1 {# out [21] $end
$var wire 1 |# out [20] $end
$var wire 1 }# out [19] $end
$var wire 1 ~# out [18] $end
$var wire 1 !$ out [17] $end
$var wire 1 "$ out [16] $end
$var wire 1 #$ out [15] $end
$var wire 1 $$ out [14] $end
$var wire 1 %$ out [13] $end
$var wire 1 &$ out [12] $end
$var wire 1 '$ out [11] $end
$var wire 1 ($ out [10] $end
$var wire 1 )$ out [9] $end
$var wire 1 *$ out [8] $end
$var wire 1 +$ out [7] $end
$var wire 1 ,$ out [6] $end
$var wire 1 -$ out [5] $end
$var wire 1 .$ out [4] $end
$var wire 1 /$ out [3] $end
$var wire 1 0$ out [2] $end
$var wire 1 1$ out [1] $end
$var wire 1 2$ out [0] $end
$upscope $end

$scope module ALUMux $end
$var parameter 32 T- size $end
$var wire 1 "& s $end
$var wire 1 Q# in1 [31] $end
$var wire 1 R# in1 [30] $end
$var wire 1 S# in1 [29] $end
$var wire 1 T# in1 [28] $end
$var wire 1 U# in1 [27] $end
$var wire 1 V# in1 [26] $end
$var wire 1 W# in1 [25] $end
$var wire 1 X# in1 [24] $end
$var wire 1 Y# in1 [23] $end
$var wire 1 Z# in1 [22] $end
$var wire 1 [# in1 [21] $end
$var wire 1 \# in1 [20] $end
$var wire 1 ]# in1 [19] $end
$var wire 1 ^# in1 [18] $end
$var wire 1 _# in1 [17] $end
$var wire 1 `# in1 [16] $end
$var wire 1 a# in1 [15] $end
$var wire 1 b# in1 [14] $end
$var wire 1 c# in1 [13] $end
$var wire 1 d# in1 [12] $end
$var wire 1 e# in1 [11] $end
$var wire 1 f# in1 [10] $end
$var wire 1 g# in1 [9] $end
$var wire 1 h# in1 [8] $end
$var wire 1 i# in1 [7] $end
$var wire 1 j# in1 [6] $end
$var wire 1 k# in1 [5] $end
$var wire 1 l# in1 [4] $end
$var wire 1 m# in1 [3] $end
$var wire 1 n# in1 [2] $end
$var wire 1 o# in1 [1] $end
$var wire 1 p# in1 [0] $end
$var wire 1 q# in2 [31] $end
$var wire 1 r# in2 [30] $end
$var wire 1 s# in2 [29] $end
$var wire 1 t# in2 [28] $end
$var wire 1 u# in2 [27] $end
$var wire 1 v# in2 [26] $end
$var wire 1 w# in2 [25] $end
$var wire 1 x# in2 [24] $end
$var wire 1 y# in2 [23] $end
$var wire 1 z# in2 [22] $end
$var wire 1 {# in2 [21] $end
$var wire 1 |# in2 [20] $end
$var wire 1 }# in2 [19] $end
$var wire 1 ~# in2 [18] $end
$var wire 1 !$ in2 [17] $end
$var wire 1 "$ in2 [16] $end
$var wire 1 #$ in2 [15] $end
$var wire 1 $$ in2 [14] $end
$var wire 1 %$ in2 [13] $end
$var wire 1 &$ in2 [12] $end
$var wire 1 '$ in2 [11] $end
$var wire 1 ($ in2 [10] $end
$var wire 1 )$ in2 [9] $end
$var wire 1 *$ in2 [8] $end
$var wire 1 +$ in2 [7] $end
$var wire 1 ,$ in2 [6] $end
$var wire 1 -$ in2 [5] $end
$var wire 1 .$ in2 [4] $end
$var wire 1 /$ in2 [3] $end
$var wire 1 0$ in2 [2] $end
$var wire 1 1$ in2 [1] $end
$var wire 1 2$ in2 [0] $end
$var wire 1 3$ out [31] $end
$var wire 1 4$ out [30] $end
$var wire 1 5$ out [29] $end
$var wire 1 6$ out [28] $end
$var wire 1 7$ out [27] $end
$var wire 1 8$ out [26] $end
$var wire 1 9$ out [25] $end
$var wire 1 :$ out [24] $end
$var wire 1 ;$ out [23] $end
$var wire 1 <$ out [22] $end
$var wire 1 =$ out [21] $end
$var wire 1 >$ out [20] $end
$var wire 1 ?$ out [19] $end
$var wire 1 @$ out [18] $end
$var wire 1 A$ out [17] $end
$var wire 1 B$ out [16] $end
$var wire 1 C$ out [15] $end
$var wire 1 D$ out [14] $end
$var wire 1 E$ out [13] $end
$var wire 1 F$ out [12] $end
$var wire 1 G$ out [11] $end
$var wire 1 H$ out [10] $end
$var wire 1 I$ out [9] $end
$var wire 1 J$ out [8] $end
$var wire 1 K$ out [7] $end
$var wire 1 L$ out [6] $end
$var wire 1 M$ out [5] $end
$var wire 1 N$ out [4] $end
$var wire 1 O$ out [3] $end
$var wire 1 P$ out [2] $end
$var wire 1 Q$ out [1] $end
$var wire 1 R$ out [0] $end
$upscope $end

$scope module alu $end
$var parameter 32 U- data_width $end
$var parameter 32 V- sel_width $end
$var parameter 3 W- _ADD $end
$var parameter 3 X- _SUB $end
$var parameter 3 Y- _AND $end
$var parameter 3 Z- _OR $end
$var parameter 3 [- _SLT $end
$var wire 1 1# operand1 [31] $end
$var wire 1 2# operand1 [30] $end
$var wire 1 3# operand1 [29] $end
$var wire 1 4# operand1 [28] $end
$var wire 1 5# operand1 [27] $end
$var wire 1 6# operand1 [26] $end
$var wire 1 7# operand1 [25] $end
$var wire 1 8# operand1 [24] $end
$var wire 1 9# operand1 [23] $end
$var wire 1 :# operand1 [22] $end
$var wire 1 ;# operand1 [21] $end
$var wire 1 <# operand1 [20] $end
$var wire 1 =# operand1 [19] $end
$var wire 1 ># operand1 [18] $end
$var wire 1 ?# operand1 [17] $end
$var wire 1 @# operand1 [16] $end
$var wire 1 A# operand1 [15] $end
$var wire 1 B# operand1 [14] $end
$var wire 1 C# operand1 [13] $end
$var wire 1 D# operand1 [12] $end
$var wire 1 E# operand1 [11] $end
$var wire 1 F# operand1 [10] $end
$var wire 1 G# operand1 [9] $end
$var wire 1 H# operand1 [8] $end
$var wire 1 I# operand1 [7] $end
$var wire 1 J# operand1 [6] $end
$var wire 1 K# operand1 [5] $end
$var wire 1 L# operand1 [4] $end
$var wire 1 M# operand1 [3] $end
$var wire 1 N# operand1 [2] $end
$var wire 1 O# operand1 [1] $end
$var wire 1 P# operand1 [0] $end
$var wire 1 3$ operand2 [31] $end
$var wire 1 4$ operand2 [30] $end
$var wire 1 5$ operand2 [29] $end
$var wire 1 6$ operand2 [28] $end
$var wire 1 7$ operand2 [27] $end
$var wire 1 8$ operand2 [26] $end
$var wire 1 9$ operand2 [25] $end
$var wire 1 :$ operand2 [24] $end
$var wire 1 ;$ operand2 [23] $end
$var wire 1 <$ operand2 [22] $end
$var wire 1 =$ operand2 [21] $end
$var wire 1 >$ operand2 [20] $end
$var wire 1 ?$ operand2 [19] $end
$var wire 1 @$ operand2 [18] $end
$var wire 1 A$ operand2 [17] $end
$var wire 1 B$ operand2 [16] $end
$var wire 1 C$ operand2 [15] $end
$var wire 1 D$ operand2 [14] $end
$var wire 1 E$ operand2 [13] $end
$var wire 1 F$ operand2 [12] $end
$var wire 1 G$ operand2 [11] $end
$var wire 1 H$ operand2 [10] $end
$var wire 1 I$ operand2 [9] $end
$var wire 1 J$ operand2 [8] $end
$var wire 1 K$ operand2 [7] $end
$var wire 1 L$ operand2 [6] $end
$var wire 1 M$ operand2 [5] $end
$var wire 1 N$ operand2 [4] $end
$var wire 1 O$ operand2 [3] $end
$var wire 1 P$ operand2 [2] $end
$var wire 1 Q$ operand2 [1] $end
$var wire 1 R$ operand2 [0] $end
$var wire 1 w% opSel [2] $end
$var wire 1 x% opSel [1] $end
$var wire 1 y% opSel [0] $end
$var reg 32 \- result [31:0] $end
$var reg 1 ]- zero $end
$upscope $end

$scope module branchAnd $end
$var wire 1 #& in1 $end
$var wire 1 {% in2 $end
$var wire 1 $& out $end
$upscope $end

$scope module branchAdder $end
$var parameter 32 ^- size $end
$var wire 1 # in1 [5] $end
$var wire 1 $ in1 [4] $end
$var wire 1 % in1 [3] $end
$var wire 1 & in1 [2] $end
$var wire 1 ' in1 [1] $end
$var wire 1 ( in1 [0] $end
$var wire 1 ?% in2 [5] $end
$var wire 1 @% in2 [4] $end
$var wire 1 A% in2 [3] $end
$var wire 1 B% in2 [2] $end
$var wire 1 C% in2 [1] $end
$var wire 1 D% in2 [0] $end
$var wire 1 ]% out [5] $end
$var wire 1 ^% out [4] $end
$var wire 1 _% out [3] $end
$var wire 1 `% out [2] $end
$var wire 1 a% out [1] $end
$var wire 1 b% out [0] $end
$upscope $end

$scope module DM $end
$var wire 1 k$ address [7] $end
$var wire 1 l$ address [6] $end
$var wire 1 m$ address [5] $end
$var wire 1 n$ address [4] $end
$var wire 1 o$ address [3] $end
$var wire 1 p$ address [2] $end
$var wire 1 q$ address [1] $end
$var wire 1 r$ address [0] $end
$var tri1 1 _- clock $end
$var wire 1 Q# data [31] $end
$var wire 1 R# data [30] $end
$var wire 1 S# data [29] $end
$var wire 1 T# data [28] $end
$var wire 1 U# data [27] $end
$var wire 1 V# data [26] $end
$var wire 1 W# data [25] $end
$var wire 1 X# data [24] $end
$var wire 1 Y# data [23] $end
$var wire 1 Z# data [22] $end
$var wire 1 [# data [21] $end
$var wire 1 \# data [20] $end
$var wire 1 ]# data [19] $end
$var wire 1 ^# data [18] $end
$var wire 1 _# data [17] $end
$var wire 1 `# data [16] $end
$var wire 1 a# data [15] $end
$var wire 1 b# data [14] $end
$var wire 1 c# data [13] $end
$var wire 1 d# data [12] $end
$var wire 1 e# data [11] $end
$var wire 1 f# data [10] $end
$var wire 1 g# data [9] $end
$var wire 1 h# data [8] $end
$var wire 1 i# data [7] $end
$var wire 1 j# data [6] $end
$var wire 1 k# data [5] $end
$var wire 1 l# data [4] $end
$var wire 1 m# data [3] $end
$var wire 1 n# data [2] $end
$var wire 1 o# data [1] $end
$var wire 1 p# data [0] $end
$var tri1 1 |% rden $end
$var wire 1 ~% wren $end
$var wire 1 s$ q [31] $end
$var wire 1 t$ q [30] $end
$var wire 1 u$ q [29] $end
$var wire 1 v$ q [28] $end
$var wire 1 w$ q [27] $end
$var wire 1 x$ q [26] $end
$var wire 1 y$ q [25] $end
$var wire 1 z$ q [24] $end
$var wire 1 {$ q [23] $end
$var wire 1 |$ q [22] $end
$var wire 1 }$ q [21] $end
$var wire 1 ~$ q [20] $end
$var wire 1 !% q [19] $end
$var wire 1 "% q [18] $end
$var wire 1 #% q [17] $end
$var wire 1 $% q [16] $end
$var wire 1 %% q [15] $end
$var wire 1 &% q [14] $end
$var wire 1 '% q [13] $end
$var wire 1 (% q [12] $end
$var wire 1 )% q [11] $end
$var wire 1 *% q [10] $end
$var wire 1 +% q [9] $end
$var wire 1 ,% q [8] $end
$var wire 1 -% q [7] $end
$var wire 1 .% q [6] $end
$var wire 1 /% q [5] $end
$var wire 1 0% q [4] $end
$var wire 1 1% q [3] $end
$var wire 1 2% q [2] $end
$var wire 1 3% q [1] $end
$var wire 1 4% q [0] $end
$var wire 1 `- sub_wire0 [31] $end
$var wire 1 a- sub_wire0 [30] $end
$var wire 1 b- sub_wire0 [29] $end
$var wire 1 c- sub_wire0 [28] $end
$var wire 1 d- sub_wire0 [27] $end
$var wire 1 e- sub_wire0 [26] $end
$var wire 1 f- sub_wire0 [25] $end
$var wire 1 g- sub_wire0 [24] $end
$var wire 1 h- sub_wire0 [23] $end
$var wire 1 i- sub_wire0 [22] $end
$var wire 1 j- sub_wire0 [21] $end
$var wire 1 k- sub_wire0 [20] $end
$var wire 1 l- sub_wire0 [19] $end
$var wire 1 m- sub_wire0 [18] $end
$var wire 1 n- sub_wire0 [17] $end
$var wire 1 o- sub_wire0 [16] $end
$var wire 1 p- sub_wire0 [15] $end
$var wire 1 q- sub_wire0 [14] $end
$var wire 1 r- sub_wire0 [13] $end
$var wire 1 s- sub_wire0 [12] $end
$var wire 1 t- sub_wire0 [11] $end
$var wire 1 u- sub_wire0 [10] $end
$var wire 1 v- sub_wire0 [9] $end
$var wire 1 w- sub_wire0 [8] $end
$var wire 1 x- sub_wire0 [7] $end
$var wire 1 y- sub_wire0 [6] $end
$var wire 1 z- sub_wire0 [5] $end
$var wire 1 {- sub_wire0 [4] $end
$var wire 1 |- sub_wire0 [3] $end
$var wire 1 }- sub_wire0 [2] $end
$var wire 1 ~- sub_wire0 [1] $end
$var wire 1 !. sub_wire0 [0] $end

$scope module altsyncram_component $end
$var parameter 32 ". width_a $end
$var parameter 32 #. widthad_a $end
$var parameter 32 $. numwords_a $end
$var parameter 96 %. outdata_reg_a $end
$var parameter 32 &. address_aclr_a $end
$var parameter 32 '. outdata_aclr_a $end
$var parameter 32 (. indata_aclr_a $end
$var parameter 32 ). wrcontrol_aclr_a $end
$var parameter 32 *. byteena_aclr_a $end
$var parameter 32 +. width_byteena_a $end
$var parameter 32 ,. width_b $end
$var parameter 32 -. widthad_b $end
$var parameter 32 .. numwords_b $end
$var parameter 48 /. rdcontrol_reg_b $end
$var parameter 48 0. address_reg_b $end
$var parameter 96 1. outdata_reg_b $end
$var parameter 32 2. outdata_aclr_b $end
$var parameter 32 3. rdcontrol_aclr_b $end
$var parameter 48 4. indata_reg_b $end
$var parameter 48 5. wrcontrol_wraddress_reg_b $end
$var parameter 48 6. byteena_reg_b $end
$var parameter 32 7. indata_aclr_b $end
$var parameter 32 8. wrcontrol_aclr_b $end
$var parameter 32 9. address_aclr_b $end
$var parameter 32 :. byteena_aclr_b $end
$var parameter 32 ;. width_byteena_b $end
$var parameter 48 <. clock_enable_input_a $end
$var parameter 48 =. clock_enable_output_a $end
$var parameter 48 >. clock_enable_input_b $end
$var parameter 48 ?. clock_enable_output_b $end
$var parameter 120 @. clock_enable_core_a $end
$var parameter 120 A. clock_enable_core_b $end
$var parameter 176 B. read_during_write_mode_port_a $end
$var parameter 160 C. read_during_write_mode_port_b $end
$var parameter 40 D. enable_ecc $end
$var parameter 32 E. width_eccstatus $end
$var parameter 40 F. ecc_pipeline_stage_enabled $end
$var parameter 88 G. operation_mode $end
$var parameter 32 H. byte_size $end
$var parameter 72 I. read_during_write_mode_mixed_ports $end
$var parameter 24 J. ram_block_type $end
$var parameter 256 K. init_file $end
$var parameter 48 L. init_file_layout $end
$var parameter 32 M. maximum_depth $end
$var parameter 48 N. intended_device_family $end
$var parameter 168 O. lpm_hint $end
$var parameter 80 P. lpm_type $end
$var parameter 24 Q. implement_in_les $end
$var parameter 40 R. power_up_uninitialized $end
$var parameter 32 S. family_arria10 $end
$var tri0 1 ~% wren_a $end
$var tri0 1 T. wren_b $end
$var tri1 1 |% rden_a $end
$var tri1 1 U. rden_b $end
$var wire 1 Q# data_a [31] $end
$var wire 1 R# data_a [30] $end
$var wire 1 S# data_a [29] $end
$var wire 1 T# data_a [28] $end
$var wire 1 U# data_a [27] $end
$var wire 1 V# data_a [26] $end
$var wire 1 W# data_a [25] $end
$var wire 1 X# data_a [24] $end
$var wire 1 Y# data_a [23] $end
$var wire 1 Z# data_a [22] $end
$var wire 1 [# data_a [21] $end
$var wire 1 \# data_a [20] $end
$var wire 1 ]# data_a [19] $end
$var wire 1 ^# data_a [18] $end
$var wire 1 _# data_a [17] $end
$var wire 1 `# data_a [16] $end
$var wire 1 a# data_a [15] $end
$var wire 1 b# data_a [14] $end
$var wire 1 c# data_a [13] $end
$var wire 1 d# data_a [12] $end
$var wire 1 e# data_a [11] $end
$var wire 1 f# data_a [10] $end
$var wire 1 g# data_a [9] $end
$var wire 1 h# data_a [8] $end
$var wire 1 i# data_a [7] $end
$var wire 1 j# data_a [6] $end
$var wire 1 k# data_a [5] $end
$var wire 1 l# data_a [4] $end
$var wire 1 m# data_a [3] $end
$var wire 1 n# data_a [2] $end
$var wire 1 o# data_a [1] $end
$var wire 1 p# data_a [0] $end
$var wire 1 V. data_b [0] $end
$var wire 1 k$ address_a [7] $end
$var wire 1 l$ address_a [6] $end
$var wire 1 m$ address_a [5] $end
$var wire 1 n$ address_a [4] $end
$var wire 1 o$ address_a [3] $end
$var wire 1 p$ address_a [2] $end
$var wire 1 q$ address_a [1] $end
$var wire 1 r$ address_a [0] $end
$var wire 1 W. address_b [0] $end
$var tri1 1 _- clock0 $end
$var wire 1 X. clock1 $end
$var tri1 1 Y. clocken0 $end
$var tri1 1 Z. clocken1 $end
$var tri1 1 [. clocken2 $end
$var tri1 1 \. clocken3 $end
$var tri0 1 ]. aclr0 $end
$var tri0 1 ^. aclr1 $end
$var tri1 1 _. byteena_a [0] $end
$var tri1 1 `. byteena_b [0] $end
$var tri0 1 a. addressstall_a $end
$var tri0 1 b. addressstall_b $end
$var wire 1 `- q_a [31] $end
$var wire 1 a- q_a [30] $end
$var wire 1 b- q_a [29] $end
$var wire 1 c- q_a [28] $end
$var wire 1 d- q_a [27] $end
$var wire 1 e- q_a [26] $end
$var wire 1 f- q_a [25] $end
$var wire 1 g- q_a [24] $end
$var wire 1 h- q_a [23] $end
$var wire 1 i- q_a [22] $end
$var wire 1 j- q_a [21] $end
$var wire 1 k- q_a [20] $end
$var wire 1 l- q_a [19] $end
$var wire 1 m- q_a [18] $end
$var wire 1 n- q_a [17] $end
$var wire 1 o- q_a [16] $end
$var wire 1 p- q_a [15] $end
$var wire 1 q- q_a [14] $end
$var wire 1 r- q_a [13] $end
$var wire 1 s- q_a [12] $end
$var wire 1 t- q_a [11] $end
$var wire 1 u- q_a [10] $end
$var wire 1 v- q_a [9] $end
$var wire 1 w- q_a [8] $end
$var wire 1 x- q_a [7] $end
$var wire 1 y- q_a [6] $end
$var wire 1 z- q_a [5] $end
$var wire 1 {- q_a [4] $end
$var wire 1 |- q_a [3] $end
$var wire 1 }- q_a [2] $end
$var wire 1 ~- q_a [1] $end
$var wire 1 !. q_a [0] $end
$var wire 1 c. q_b [0] $end
$var wire 1 d. eccstatus [2] $end
$var wire 1 e. eccstatus [1] $end
$var wire 1 f. eccstatus [0] $end

$scope begin m_default $end

$scope module altsyncram_inst $end
$var parameter 32 g. width_a $end
$var parameter 32 h. widthad_a $end
$var parameter 32 i. numwords_a $end
$var parameter 96 j. outdata_reg_a $end
$var parameter 32 k. address_aclr_a $end
$var parameter 32 l. outdata_aclr_a $end
$var parameter 32 m. indata_aclr_a $end
$var parameter 32 n. wrcontrol_aclr_a $end
$var parameter 32 o. byteena_aclr_a $end
$var parameter 32 p. width_byteena_a $end
$var parameter 32 q. width_b $end
$var parameter 32 r. widthad_b $end
$var parameter 32 s. numwords_b $end
$var parameter 48 t. rdcontrol_reg_b $end
$var parameter 48 u. address_reg_b $end
$var parameter 96 v. outdata_reg_b $end
$var parameter 32 w. outdata_aclr_b $end
$var parameter 32 x. rdcontrol_aclr_b $end
$var parameter 48 y. indata_reg_b $end
$var parameter 48 z. wrcontrol_wraddress_reg_b $end
$var parameter 48 {. byteena_reg_b $end
$var parameter 32 |. indata_aclr_b $end
$var parameter 32 }. wrcontrol_aclr_b $end
$var parameter 32 ~. address_aclr_b $end
$var parameter 32 !/ byteena_aclr_b $end
$var parameter 32 "/ width_byteena_b $end
$var parameter 48 #/ clock_enable_input_a $end
$var parameter 48 $/ clock_enable_output_a $end
$var parameter 48 %/ clock_enable_input_b $end
$var parameter 48 &/ clock_enable_output_b $end
$var parameter 120 '/ clock_enable_core_a $end
$var parameter 120 (/ clock_enable_core_b $end
$var parameter 176 )/ read_during_write_mode_port_a $end
$var parameter 160 */ read_during_write_mode_port_b $end
$var parameter 40 +/ enable_ecc $end
$var parameter 32 ,/ width_eccstatus $end
$var parameter 40 -/ ecc_pipeline_stage_enabled $end
$var parameter 88 ./ operation_mode $end
$var parameter 32 // byte_size $end
$var parameter 72 0/ read_during_write_mode_mixed_ports $end
$var parameter 24 1/ ram_block_type $end
$var parameter 256 2/ init_file $end
$var parameter 48 3/ init_file_layout $end
$var parameter 32 4/ maximum_depth $end
$var parameter 48 5/ intended_device_family $end
$var parameter 168 6/ lpm_hint $end
$var parameter 80 7/ lpm_type $end
$var parameter 24 8/ implement_in_les $end
$var parameter 40 9/ power_up_uninitialized $end
$var parameter 24 :/ sim_show_memory_data_in_port_b_layout $end
$var parameter 32 ;/ is_lutram $end
$var parameter 32 </ is_bidir_and_wrcontrol_addb_clk0 $end
$var parameter 32 =/ is_bidir_and_wrcontrol_addb_clk1 $end
$var parameter 32 >/ check_simultaneous_read_write $end
$var parameter 32 ?/ dual_port_addreg_b_clk0 $end
$var parameter 32 @/ dual_port_addreg_b_clk1 $end
$var parameter 32 A/ i_byte_size_tmp $end
$var parameter 32 B/ i_lutram_read $end
$var parameter 32 C/ enable_mem_data_b_reading $end
$var parameter 32 D/ family_arriav $end
$var parameter 32 E/ family_cyclonev $end
$var parameter 32 F/ family_base_arriav $end
$var parameter 32 G/ family_arria10 $end
$var parameter 32 H/ family_stratix10 $end
$var parameter 32 I/ family_arriavi $end
$var parameter 32 J/ family_nightfury $end
$var parameter 32 K/ family_arriavgz $end
$var parameter 32 L/ family_stratixv $end
$var parameter 32 M/ family_hardcopyiv $end
$var parameter 32 N/ family_hardcopyiii $end
$var parameter 32 O/ family_hardcopyii $end
$var parameter 32 P/ family_arriaiigz $end
$var parameter 32 Q/ family_arriaiigx $end
$var parameter 32 R/ family_stratixiii $end
$var parameter 32 S/ family_zippleback $end
$var parameter 32 T/ family_cycloneiii $end
$var parameter 32 U/ family_cyclone $end
$var parameter 32 V/ family_base_cycloneii $end
$var parameter 32 W/ family_cycloneii $end
$var parameter 32 X/ family_base_stratix $end
$var parameter 32 Y/ family_base_stratixii $end
$var parameter 32 Z/ family_has_lutram $end
$var parameter 32 [/ family_has_stratixv_style_ram $end
$var parameter 32 \/ family_has_stratixiii_style_ram $end
$var parameter 32 ]/ family_has_m512 $end
$var parameter 32 ^/ family_has_megaram $end
$var parameter 32 _/ family_has_stratixi_style_ram $end
$var parameter 32 `/ is_write_on_positive_edge $end
$var parameter 32 a/ lutram_single_port_fast_read $end
$var parameter 32 b/ lutram_dual_port_fast_read $end
$var parameter 32 c/ s3_address_aclr_a $end
$var parameter 32 d/ s3_address_aclr_b $end
$var parameter 32 e/ i_address_aclr_family_a $end
$var parameter 32 f/ i_address_aclr_family_b $end
$var tri0 1 ~% wren_a $end
$var tri0 1 T. wren_b $end
$var tri1 1 |% rden_a $end
$var tri1 1 U. rden_b $end
$var wire 1 Q# data_a [31] $end
$var wire 1 R# data_a [30] $end
$var wire 1 S# data_a [29] $end
$var wire 1 T# data_a [28] $end
$var wire 1 U# data_a [27] $end
$var wire 1 V# data_a [26] $end
$var wire 1 W# data_a [25] $end
$var wire 1 X# data_a [24] $end
$var wire 1 Y# data_a [23] $end
$var wire 1 Z# data_a [22] $end
$var wire 1 [# data_a [21] $end
$var wire 1 \# data_a [20] $end
$var wire 1 ]# data_a [19] $end
$var wire 1 ^# data_a [18] $end
$var wire 1 _# data_a [17] $end
$var wire 1 `# data_a [16] $end
$var wire 1 a# data_a [15] $end
$var wire 1 b# data_a [14] $end
$var wire 1 c# data_a [13] $end
$var wire 1 d# data_a [12] $end
$var wire 1 e# data_a [11] $end
$var wire 1 f# data_a [10] $end
$var wire 1 g# data_a [9] $end
$var wire 1 h# data_a [8] $end
$var wire 1 i# data_a [7] $end
$var wire 1 j# data_a [6] $end
$var wire 1 k# data_a [5] $end
$var wire 1 l# data_a [4] $end
$var wire 1 m# data_a [3] $end
$var wire 1 n# data_a [2] $end
$var wire 1 o# data_a [1] $end
$var wire 1 p# data_a [0] $end
$var wire 1 V. data_b [0] $end
$var wire 1 k$ address_a [7] $end
$var wire 1 l$ address_a [6] $end
$var wire 1 m$ address_a [5] $end
$var wire 1 n$ address_a [4] $end
$var wire 1 o$ address_a [3] $end
$var wire 1 p$ address_a [2] $end
$var wire 1 q$ address_a [1] $end
$var wire 1 r$ address_a [0] $end
$var wire 1 W. address_b [0] $end
$var tri1 1 _- clock0 $end
$var wire 1 X. clock1 $end
$var tri1 1 Y. clocken0 $end
$var tri1 1 Z. clocken1 $end
$var tri1 1 [. clocken2 $end
$var tri1 1 \. clocken3 $end
$var tri0 1 ]. aclr0 $end
$var tri0 1 ^. aclr1 $end
$var wire 1 _. byteena_a [0] $end
$var wire 1 `. byteena_b [0] $end
$var tri0 1 a. addressstall_a $end
$var tri0 1 b. addressstall_b $end
$var wire 1 `- q_a [31] $end
$var wire 1 a- q_a [30] $end
$var wire 1 b- q_a [29] $end
$var wire 1 c- q_a [28] $end
$var wire 1 d- q_a [27] $end
$var wire 1 e- q_a [26] $end
$var wire 1 f- q_a [25] $end
$var wire 1 g- q_a [24] $end
$var wire 1 h- q_a [23] $end
$var wire 1 i- q_a [22] $end
$var wire 1 j- q_a [21] $end
$var wire 1 k- q_a [20] $end
$var wire 1 l- q_a [19] $end
$var wire 1 m- q_a [18] $end
$var wire 1 n- q_a [17] $end
$var wire 1 o- q_a [16] $end
$var wire 1 p- q_a [15] $end
$var wire 1 q- q_a [14] $end
$var wire 1 r- q_a [13] $end
$var wire 1 s- q_a [12] $end
$var wire 1 t- q_a [11] $end
$var wire 1 u- q_a [10] $end
$var wire 1 v- q_a [9] $end
$var wire 1 w- q_a [8] $end
$var wire 1 x- q_a [7] $end
$var wire 1 y- q_a [6] $end
$var wire 1 z- q_a [5] $end
$var wire 1 {- q_a [4] $end
$var wire 1 |- q_a [3] $end
$var wire 1 }- q_a [2] $end
$var wire 1 ~- q_a [1] $end
$var wire 1 !. q_a [0] $end
$var wire 1 c. q_b [0] $end
$var wire 1 d. eccstatus [2] $end
$var wire 1 e. eccstatus [1] $end
$var wire 1 f. eccstatus [0] $end
$var reg 32 g/ i_data_reg_a [31:0] $end
$var reg 32 h/ temp_wa [31:0] $end
$var reg 32 i/ temp_wa2 [31:0] $end
$var reg 32 j/ temp_wa2b [31:0] $end
$var reg 32 k/ init_temp [31:0] $end
$var reg 1 l/ i_data_reg_b [0:0] $end
$var reg 1 m/ temp_wb [0:0] $end
$var reg 1 n/ temp_wb2 [0:0] $end
$var reg 1 o/ temp $end
$var reg 32 p/ i_q_reg_a [31:0] $end
$var reg 32 q/ i_q_tmp_a [31:0] $end
$var reg 32 r/ i_q_tmp2_a [31:0] $end
$var reg 1 s/ i_q_reg_b [0:0] $end
$var reg 1 t/ i_q_tmp_b [0:0] $end
$var reg 1 u/ i_q_tmp2_b [0:0] $end
$var reg 1 v/ i_q_output_latch [0:0] $end
$var reg 32 w/ i_byteena_mask_reg_a [31:0] $end
$var reg 1 x/ i_byteena_mask_reg_b [0:0] $end
$var reg 8 y/ i_address_reg_a [7:0] $end
$var reg 1 z/ i_address_reg_b [0:0] $end
$var reg 1 {/ i_q_ecc_reg_b [0:0] $end
$var reg 1 |/ i_q_ecc_tmp_b [0:0] $end
$var reg 8 }/ i_original_address_a [7:0] $end
$var reg 32 ~/ i_byteena_mask_reg_a_tmp [31:0] $end
$var reg 1 !0 i_byteena_mask_reg_b_tmp [0:0] $end
$var reg 32 "0 i_byteena_mask_reg_a_out [31:0] $end
$var reg 1 #0 i_byteena_mask_reg_b_out [0:0] $end
$var reg 32 $0 i_byteena_mask_reg_a_x [31:0] $end
$var reg 1 %0 i_byteena_mask_reg_b_x [0:0] $end
$var reg 32 &0 i_byteena_mask_reg_a_out_b [31:0] $end
$var reg 1 '0 i_byteena_mask_reg_b_out_a [0:0] $end
$var reg 2048 (0 ram_initf [2048:1] $end
$var reg 1 )0 i_wren_reg_a $end
$var reg 1 *0 i_wren_reg_b $end
$var reg 1 +0 i_rden_reg_a $end
$var reg 1 ,0 i_rden_reg_b $end
$var reg 1 -0 i_read_flag_a $end
$var reg 1 .0 i_read_flag_b $end
$var reg 1 /0 i_write_flag_a $end
$var reg 1 00 i_write_flag_b $end
$var reg 1 10 good_to_go_a $end
$var reg 1 20 good_to_go_b $end
$var reg 32 30 file_desc [31:0] $end
$var reg 1 40 init_file_b_port $end
$var reg 1 50 i_nmram_write_a $end
$var reg 1 60 i_nmram_write_b $end
$var reg 32 70 wa_mult_x [31:0] $end
$var reg 32 80 wa_mult_x_ii [31:0] $end
$var reg 32 90 wa_mult_x_iii [31:0] $end
$var reg 40 :0 add_reg_a_mult_wa [39:0] $end
$var reg 2 ;0 add_reg_b_mult_wb [1:0] $end
$var reg 40 <0 add_reg_a_mult_wa_pl_wa [39:0] $end
$var reg 2 =0 add_reg_b_mult_wb_pl_wb [1:0] $end
$var reg 1 >0 same_clock_pulse0 $end
$var reg 1 ?0 same_clock_pulse1 $end
$var reg 1 @0 i_original_data_b [0:0] $end
$var reg 32 A0 i_original_data_a [31:0] $end
$var reg 1 B0 i_address_aclr_a_flag $end
$var reg 1 C0 i_address_aclr_a_prev $end
$var reg 1 D0 i_address_aclr_b_flag $end
$var reg 1 E0 i_address_aclr_b_prev $end
$var reg 1 F0 i_outdata_aclr_a_prev $end
$var reg 1 G0 i_outdata_aclr_b_prev $end
$var reg 1 H0 i_force_reread_a $end
$var reg 1 I0 i_force_reread_a1 $end
$var reg 1 J0 i_force_reread_b $end
$var reg 1 K0 i_force_reread_b1 $end
$var reg 1 L0 i_force_reread_a_signal $end
$var reg 1 M0 i_force_reread_b_signal $end
$var reg 169 N0 cread_during_write_mode_mixed_ports [168:0] $end
$var reg 57 O0 i_ram_block_type [56:0] $end
$var integer 32 P0 i_byte_size $end
$var wire 1 Q0 i_good_to_write_a $end
$var wire 1 R0 i_good_to_write_b $end
$var reg 1 S0 i_good_to_write_a2 $end
$var reg 1 T0 i_good_to_write_b2 $end
$var reg 1 U0 i_core_clocken_a_reg $end
$var reg 1 V0 i_core_clocken0_b_reg $end
$var reg 1 W0 i_core_clocken1_b_reg $end
$var wire 1 X0 i_indata_aclr_a $end
$var wire 1 Y0 i_address_aclr_a $end
$var wire 1 Z0 i_wrcontrol_aclr_a $end
$var wire 1 [0 i_indata_aclr_b $end
$var wire 1 \0 i_address_aclr_b $end
$var wire 1 ]0 i_wrcontrol_aclr_b $end
$var wire 1 ^0 i_outdata_aclr_a $end
$var wire 1 _0 i_outdata_aclr_b $end
$var wire 1 `0 i_rdcontrol_aclr_b $end
$var wire 1 a0 i_byteena_aclr_a $end
$var wire 1 b0 i_byteena_aclr_b $end
$var wire 1 c0 i_outdata_clken_a $end
$var wire 1 d0 i_outdata_clken_b $end
$var wire 1 e0 i_outlatch_clken_a $end
$var wire 1 f0 i_outlatch_clken_b $end
$var wire 1 g0 i_clocken0 $end
$var wire 1 h0 i_clocken1_b $end
$var wire 1 i0 i_clocken0_b $end
$var wire 1 j0 i_core_clocken_a $end
$var wire 1 k0 i_core_clocken_b $end
$var wire 1 l0 i_core_clocken0_b $end
$var wire 1 m0 i_core_clocken1_b $end
$var tri1 1 n0 i_byteena_a [0] $end
$var tri1 1 o0 i_byteena_b [0] $end
$var integer 32 p0 i_numwords_a $end
$var integer 32 q0 i_numwords_b $end
$var integer 32 r0 i_aclr_flag_a $end
$var integer 32 s0 i_aclr_flag_b $end
$var integer 32 t0 i_q_tmp2_a_idx $end
$var integer 32 u0 init_i $end
$var integer 32 v0 i $end
$var integer 32 w0 i2 $end
$var integer 32 x0 i3 $end
$var integer 32 y0 i4 $end
$var integer 32 z0 i5 $end
$var integer 32 {0 j $end
$var integer 32 |0 j2 $end
$var integer 32 }0 j3 $end
$var integer 32 ~0 k $end
$var integer 32 !1 k2 $end
$var integer 32 "1 k3 $end
$var integer 32 #1 k4 $end
$var integer 32 $1 i_div_wa $end
$var integer 32 %1 i_div_wb $end
$var integer 32 &1 j_plus_i2 $end
$var integer 32 '1 j2_plus_i5 $end
$var integer 32 (1 j3_plus_i5 $end
$var integer 32 )1 j_plus_i2_div_a $end
$var integer 32 *1 j2_plus_i5_div_a $end
$var integer 32 +1 j3_plus_i5_div_a $end
$var integer 32 ,1 j3_plus_i5_div_b $end
$var integer 32 -1 i_byteena_count $end
$var integer 32 .1 port_a_bit_count_low $end
$var integer 32 /1 port_a_bit_count_high $end
$var integer 32 01 port_b_bit_count_low $end
$var integer 32 11 port_b_bit_count_high $end
$var time 64 21 i_data_write_time_a $end
$var time 64 31 i_data_write_time_b $end

$scope module dev $end

$scope function IS_FAMILY_ARRIA10 $end
$var reg 1 41 IS_FAMILY_ARRIA10 $end
$var reg 160 51 device [160:1] $end
$var reg 1 61 is_arria10 $end
$upscope $end

$scope function IS_FAMILY_ARRIAGX $end
$var reg 1 71 IS_FAMILY_ARRIAGX $end
$var reg 160 81 device [160:1] $end
$var reg 1 91 is_arriagx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGX $end
$var reg 1 :1 IS_FAMILY_ARRIAIIGX $end
$var reg 160 ;1 device [160:1] $end
$var reg 1 <1 is_arriaiigx $end
$upscope $end

$scope function IS_FAMILY_ARRIAIIGZ $end
$var reg 1 =1 IS_FAMILY_ARRIAIIGZ $end
$var reg 160 >1 device [160:1] $end
$var reg 1 ?1 is_arriaiigz $end
$upscope $end

$scope function IS_FAMILY_ARRIAVGZ $end
$var reg 1 @1 IS_FAMILY_ARRIAVGZ $end
$var reg 160 A1 device [160:1] $end
$var reg 1 B1 is_arriavgz $end
$upscope $end

$scope function IS_FAMILY_ARRIAV $end
$var reg 1 C1 IS_FAMILY_ARRIAV $end
$var reg 160 D1 device [160:1] $end
$var reg 1 E1 is_arriav $end
$upscope $end

$scope function IS_FAMILY_CYCLONE10LP $end
$var reg 1 F1 IS_FAMILY_CYCLONE10LP $end
$var reg 160 G1 device [160:1] $end
$var reg 1 H1 is_cyclone10lp $end
$upscope $end

$scope function IS_FAMILY_CYCLONEII $end
$var reg 1 I1 IS_FAMILY_CYCLONEII $end
$var reg 160 J1 device [160:1] $end
$var reg 1 K1 is_cycloneii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIIILS $end
$var reg 1 L1 IS_FAMILY_CYCLONEIIILS $end
$var reg 160 M1 device [160:1] $end
$var reg 1 N1 is_cycloneiiils $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIII $end
$var reg 1 O1 IS_FAMILY_CYCLONEIII $end
$var reg 160 P1 device [160:1] $end
$var reg 1 Q1 is_cycloneiii $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVE $end
$var reg 1 R1 IS_FAMILY_CYCLONEIVE $end
$var reg 160 S1 device [160:1] $end
$var reg 1 T1 is_cycloneive $end
$upscope $end

$scope function IS_FAMILY_CYCLONEIVGX $end
$var reg 1 U1 IS_FAMILY_CYCLONEIVGX $end
$var reg 160 V1 device [160:1] $end
$var reg 1 W1 is_cycloneivgx $end
$upscope $end

$scope function IS_FAMILY_CYCLONEV $end
$var reg 1 X1 IS_FAMILY_CYCLONEV $end
$var reg 160 Y1 device [160:1] $end
$var reg 1 Z1 is_cyclonev $end
$upscope $end

$scope function IS_FAMILY_CYCLONE $end
$var reg 1 [1 IS_FAMILY_CYCLONE $end
$var reg 160 \1 device [160:1] $end
$var reg 1 ]1 is_cyclone $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYII $end
$var reg 1 ^1 IS_FAMILY_HARDCOPYII $end
$var reg 160 _1 device [160:1] $end
$var reg 1 `1 is_hardcopyii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIII $end
$var reg 1 a1 IS_FAMILY_HARDCOPYIII $end
$var reg 160 b1 device [160:1] $end
$var reg 1 c1 is_hardcopyiii $end
$upscope $end

$scope function IS_FAMILY_HARDCOPYIV $end
$var reg 1 d1 IS_FAMILY_HARDCOPYIV $end
$var reg 160 e1 device [160:1] $end
$var reg 1 f1 is_hardcopyiv $end
$upscope $end

$scope function IS_FAMILY_MAX10 $end
$var reg 1 g1 IS_FAMILY_MAX10 $end
$var reg 160 h1 device [160:1] $end
$var reg 1 i1 is_max10 $end
$upscope $end

$scope function IS_FAMILY_MAXII $end
$var reg 1 j1 IS_FAMILY_MAXII $end
$var reg 160 k1 device [160:1] $end
$var reg 1 l1 is_maxii $end
$upscope $end

$scope function IS_FAMILY_MAXV $end
$var reg 1 m1 IS_FAMILY_MAXV $end
$var reg 160 n1 device [160:1] $end
$var reg 1 o1 is_maxv $end
$upscope $end

$scope function IS_FAMILY_STRATIX10 $end
$var reg 1 p1 IS_FAMILY_STRATIX10 $end
$var reg 160 q1 device [160:1] $end
$var reg 1 r1 is_stratix10 $end
$upscope $end

$scope function IS_FAMILY_STRATIXGX $end
$var reg 1 s1 IS_FAMILY_STRATIXGX $end
$var reg 160 t1 device [160:1] $end
$var reg 1 u1 is_stratixgx $end
$upscope $end

$scope function IS_FAMILY_STRATIXIIGX $end
$var reg 1 v1 IS_FAMILY_STRATIXIIGX $end
$var reg 160 w1 device [160:1] $end
$var reg 1 x1 is_stratixiigx $end
$upscope $end

$scope function IS_FAMILY_STRATIXII $end
$var reg 1 y1 IS_FAMILY_STRATIXII $end
$var reg 160 z1 device [160:1] $end
$var reg 1 {1 is_stratixii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIII $end
$var reg 1 |1 IS_FAMILY_STRATIXIII $end
$var reg 160 }1 device [160:1] $end
$var reg 1 ~1 is_stratixiii $end
$upscope $end

$scope function IS_FAMILY_STRATIXIV $end
$var reg 1 !2 IS_FAMILY_STRATIXIV $end
$var reg 160 "2 device [160:1] $end
$var reg 1 #2 is_stratixiv $end
$upscope $end

$scope function IS_FAMILY_STRATIXV $end
$var reg 1 $2 IS_FAMILY_STRATIXV $end
$var reg 160 %2 device [160:1] $end
$var reg 1 &2 is_stratixv $end
$upscope $end

$scope function IS_FAMILY_STRATIX $end
$var reg 1 '2 IS_FAMILY_STRATIX $end
$var reg 160 (2 device [160:1] $end
$var reg 1 )2 is_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXGX $end
$var reg 1 *2 FEATURE_FAMILY_STRATIXGX $end
$var reg 160 +2 device [160:1] $end
$var reg 1 ,2 var_family_stratixgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE $end
$var reg 1 -2 FEATURE_FAMILY_CYCLONE $end
$var reg 160 .2 device [160:1] $end
$var reg 1 /2 var_family_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIIGX $end
$var reg 1 02 FEATURE_FAMILY_STRATIXIIGX $end
$var reg 160 12 device [160:1] $end
$var reg 1 22 var_family_stratixiigx $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIII $end
$var reg 1 32 FEATURE_FAMILY_STRATIXIII $end
$var reg 160 42 device [160:1] $end
$var reg 1 52 var_family_stratixiii $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAVGZ $end
$var reg 1 62 FEATURE_FAMILY_ARRIAVGZ $end
$var reg 160 72 device [160:1] $end
$var reg 1 82 var_family_arriavgz $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXV $end
$var reg 1 92 FEATURE_FAMILY_STRATIXV $end
$var reg 160 :2 device [160:1] $end
$var reg 1 ;2 var_family_stratixv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIA10 $end
$var reg 1 <2 FEATURE_FAMILY_ARRIA10 $end
$var reg 160 =2 device [160:1] $end
$var reg 1 >2 var_family_arria10 $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONE10LP $end
$var reg 1 ?2 FEATURE_FAMILY_CYCLONE10LP $end
$var reg 160 @2 device [160:1] $end
$var reg 1 A2 var_family_cyclone10lp $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXII $end
$var reg 1 B2 FEATURE_FAMILY_STRATIXII $end
$var reg 160 C2 device [160:1] $end
$var reg 1 D2 var_family_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 1 E2 FEATURE_FAMILY_CYCLONEIVGX $end
$var reg 160 F2 device [160:1] $end
$var reg 1 G2 var_family_cycloneivgx $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIVE $end
$var reg 1 H2 FEATURE_FAMILY_CYCLONEIVE $end
$var reg 160 I2 device [160:1] $end
$var reg 1 J2 var_family_cycloneive $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEIII $end
$var reg 1 K2 FEATURE_FAMILY_CYCLONEIII $end
$var reg 160 L2 device [160:1] $end
$var reg 1 M2 var_family_cycloneiii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX_HC $end
$var reg 1 N2 FEATURE_FAMILY_STRATIX_HC $end
$var reg 160 O2 device [160:1] $end
$var reg 1 P2 var_family_stratix_hc $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX $end
$var reg 1 Q2 FEATURE_FAMILY_STRATIX $end
$var reg 160 R2 device [160:1] $end
$var reg 1 S2 var_family_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_MAXII $end
$var reg 1 T2 FEATURE_FAMILY_MAXII $end
$var reg 160 U2 device [160:1] $end
$var reg 1 V2 var_family_maxii $end
$upscope $end

$scope function FEATURE_FAMILY_MAXV $end
$var reg 1 W2 FEATURE_FAMILY_MAXV $end
$var reg 160 X2 device [160:1] $end
$var reg 1 Y2 var_family_maxv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEII $end
$var reg 1 Z2 FEATURE_FAMILY_CYCLONEII $end
$var reg 160 [2 device [160:1] $end
$var reg 1 \2 var_family_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIXIV $end
$var reg 1 ]2 FEATURE_FAMILY_STRATIXIV $end
$var reg 160 ^2 device [160:1] $end
$var reg 1 _2 var_family_stratixiv $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 1 `2 FEATURE_FAMILY_ARRIAIIGZ $end
$var reg 160 a2 device [160:1] $end
$var reg 1 b2 var_family_arriaiigz $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAIIGX $end
$var reg 1 c2 FEATURE_FAMILY_ARRIAIIGX $end
$var reg 160 d2 device [160:1] $end
$var reg 1 e2 var_family_arriaiigx $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIII $end
$var reg 1 f2 FEATURE_FAMILY_HARDCOPYIII $end
$var reg 160 g2 device [160:1] $end
$var reg 1 h2 var_family_hardcopyiii $end
$upscope $end

$scope function FEATURE_FAMILY_HARDCOPYIV $end
$var reg 1 i2 FEATURE_FAMILY_HARDCOPYIV $end
$var reg 160 j2 device [160:1] $end
$var reg 1 k2 var_family_hardcopyiv $end
$upscope $end

$scope function FEATURE_FAMILY_CYCLONEV $end
$var reg 1 l2 FEATURE_FAMILY_CYCLONEV $end
$var reg 160 m2 device [160:1] $end
$var reg 1 n2 var_family_cyclonev $end
$upscope $end

$scope function FEATURE_FAMILY_ARRIAV $end
$var reg 1 o2 FEATURE_FAMILY_ARRIAV $end
$var reg 160 p2 device [160:1] $end
$var reg 1 q2 var_family_arriav $end
$upscope $end

$scope function FEATURE_FAMILY_MAX10 $end
$var reg 1 r2 FEATURE_FAMILY_MAX10 $end
$var reg 160 s2 device [160:1] $end
$var reg 1 t2 var_family_max10 $end
$upscope $end

$scope function FEATURE_FAMILY_STRATIX10 $end
$var reg 1 u2 FEATURE_FAMILY_STRATIX10 $end
$var reg 160 v2 device [160:1] $end
$var reg 1 w2 var_family_stratix10 $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 1 x2 FEATURE_FAMILY_BASE_STRATIXII $end
$var reg 160 y2 device [160:1] $end
$var reg 1 z2 var_family_base_stratixii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_STRATIX $end
$var reg 1 {2 FEATURE_FAMILY_BASE_STRATIX $end
$var reg 160 |2 device [160:1] $end
$var reg 1 }2 var_family_base_stratix $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 1 ~2 FEATURE_FAMILY_BASE_CYCLONEII $end
$var reg 160 !3 device [160:1] $end
$var reg 1 "3 var_family_base_cycloneii $end
$upscope $end

$scope function FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 1 #3 FEATURE_FAMILY_BASE_CYCLONE $end
$var reg 160 $3 device [160:1] $end
$var reg 1 %3 var_family_base_cyclone $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 1 &3 FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW $end
$var reg 160 '3 device [160:1] $end
$var reg 1 (3 var_family_has_altera_mult_add_flow $end
$upscope $end

$scope function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 1 )3 FEATURE_FAMILY_IS_ALTMULT_ADD_EOL $end
$var reg 160 *3 device [160:1] $end
$var reg 1 +3 var_family_is_altmult_add_eol $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 1 ,3 FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM $end
$var reg 160 -3 device [160:1] $end
$var reg 1 .3 var_family_has_stratixii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 1 /3 FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM $end
$var reg 160 03 device [160:1] $end
$var reg 1 13 var_family_has_stratixiii_style_ram $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 1 23 FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL $end
$var reg 160 33 device [160:1] $end
$var reg 1 43 var_family_has_stratix_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 1 53 FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL $end
$var reg 160 63 device [160:1] $end
$var reg 1 73 var_family_has_stratixii_style_pll $end
$upscope $end

$scope function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 1 83 FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO $end
$var reg 160 93 device [160:1] $end
$var reg 1 :3 var_family_has_inverted_output_ddio $end
$upscope $end

$scope function IS_VALID_FAMILY $end
$var reg 1 ;3 IS_VALID_FAMILY $end
$var reg 160 <3 device [160:1] $end
$var reg 1 =3 is_valid $end
$upscope $end
$upscope $end

$scope module mem $end

$scope function tolower $end
$var reg 8 >3 tolower [8:1] $end
$var reg 8 ?3 given_character [8:1] $end
$var reg 8 @3 conv_char [8:1] $end
$upscope $end

$scope function ecc_parity $end
$var reg 8 A3 ecc_parity [7:0] $end
$var reg 8 B3 i_eccencparity [7:0] $end
$var integer 32 C3 pointer $end
$var integer 32 D3 pointer_max $end
$var integer 32 E3 pointer_min $end
$var integer 32 F3 flag_err $end
$var integer 32 G3 flag $end
$var integer 32 H3 flag_double $end
$var integer 32 I3 flag_triple $end
$var integer 32 J3 flag_single $end
$var integer 32 K3 flag_no_err $end
$var integer 32 L3 flag_uncorr $end
$var integer 32 M3 n $end
$var integer 32 N3 err $end
$var integer 32 O3 found $end
$var integer 32 P3 found_2 $end
$upscope $end

$scope task convert_mif2ver $end
$var reg 2048 Q3 in_file [2048:1] $end
$var integer 32 R3 width $end
$var reg 2048 S3 out_file [2048:1] $end
$var reg 2048 T3 buffer [2048:1] $end
$var reg 1025 U3 memory_data1 [1024:0] $end
$var reg 1025 V3 memory_data2 [1024:0] $end
$var reg 8 W3 c [8:1] $end
$var reg 4 X3 hex [3:0] $end
$var reg 4 Y3 tmp_char [3:0] $end
$var reg 24 Z3 address_radix [24:1] $end
$var reg 24 [3 data_radix [24:1] $end
$var reg 1 \3 get_width $end
$var reg 1 ]3 get_depth $end
$var reg 1 ^3 get_data_radix $end
$var reg 1 _3 get_address_radix $end
$var reg 1 `3 width_found $end
$var reg 1 a3 depth_found $end
$var reg 1 b3 data_radix_found $end
$var reg 1 c3 address_radix_found $end
$var reg 1 d3 get_address_data_pairs $end
$var reg 1 e3 get_address $end
$var reg 1 f3 get_data $end
$var reg 1 g3 display_address $end
$var reg 1 h3 invalid_address $end
$var reg 1 i3 get_start_address $end
$var reg 1 j3 get_end_address $end
$var reg 1 k3 done $end
$var reg 1 l3 error_status $end
$var reg 1 m3 first_rec $end
$var reg 1 n3 last_rec $end
$var integer 32 o3 memory_width $end
$var integer 32 p3 memory_depth $end
$var integer 32 q3 value $end
$var integer 32 r3 ifp $end
$var integer 32 s3 ofp $end
$var integer 32 t3 r $end
$var integer 32 u3 r2 $end
$var integer 32 v3 i $end
$var integer 32 w3 j $end
$var integer 32 x3 k $end
$var integer 32 y3 m $end
$var integer 32 z3 n $end
$var integer 32 {3 negative $end
$var integer 32 |3 off_addr $end
$var integer 32 }3 nn $end
$var integer 32 ~3 address $end
$var integer 32 !4 tt $end
$var integer 32 "4 cc $end
$var integer 32 #4 aah $end
$var integer 32 $4 aal $end
$var integer 32 %4 dd $end
$var integer 32 &4 sum $end
$var integer 32 '4 start_address $end
$var integer 32 (4 end_address $end
$var integer 32 )4 line_no $end
$var integer 32 *4 character_count $end
$var integer 32 +4 comment_with_percent_found $end
$var integer 32 ,4 comment_with_double_minus_found $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_hex2ver $end
$var reg 2048 -4 in_file [2048:1] $end
$var integer 32 .4 width $end
$var reg 2048 /4 out_file [2048:1] $end
$var reg 8 04 c [8:1] $end
$var reg 4 14 hex [3:0] $end
$var reg 4 24 tmp_char [3:0] $end
$var reg 1 34 done $end
$var reg 1 44 error_status $end
$var reg 1 54 first_rec $end
$var reg 1 64 last_rec $end
$var reg 1 74 first_normal_record $end
$var reg 1 84 is_word_address_format $end
$var integer 32 94 ifp $end
$var integer 32 :4 ofp $end
$var integer 32 ;4 r $end
$var integer 32 <4 r2 $end
$var integer 32 =4 i $end
$var integer 32 >4 j $end
$var integer 32 ?4 k $end
$var integer 32 @4 m $end
$var integer 32 A4 n $end
$var integer 32 B4 off_addr $end
$var integer 32 C4 nn $end
$var integer 32 D4 aaaa $end
$var integer 32 E4 aaaa_pre $end
$var integer 32 F4 tt $end
$var integer 32 G4 cc $end
$var integer 32 H4 aah $end
$var integer 32 I4 aal $end
$var integer 32 J4 dd $end
$var integer 32 K4 sum $end
$var integer 32 L4 line_no $end
$var integer 32 M4 divide_factor $end

$scope begin READER $end
$upscope $end
$upscope $end

$scope task convert_to_ver_file $end
$var reg 2048 N4 in_file [2048:1] $end
$var integer 32 O4 width $end
$var reg 2048 P4 out_file [2048:1] $end
$upscope $end
$upscope $end

$scope begin genblk1 $end
$upscope $end

$scope begin genblk2 $end
$upscope $end

$scope begin genblk3 $end
$upscope $end

$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module WBMux $end
$var parameter 32 Q4 size $end
$var wire 1 }% s $end
$var wire 1 S$ in1 [31] $end
$var wire 1 T$ in1 [30] $end
$var wire 1 U$ in1 [29] $end
$var wire 1 V$ in1 [28] $end
$var wire 1 W$ in1 [27] $end
$var wire 1 X$ in1 [26] $end
$var wire 1 Y$ in1 [25] $end
$var wire 1 Z$ in1 [24] $end
$var wire 1 [$ in1 [23] $end
$var wire 1 \$ in1 [22] $end
$var wire 1 ]$ in1 [21] $end
$var wire 1 ^$ in1 [20] $end
$var wire 1 _$ in1 [19] $end
$var wire 1 `$ in1 [18] $end
$var wire 1 a$ in1 [17] $end
$var wire 1 b$ in1 [16] $end
$var wire 1 c$ in1 [15] $end
$var wire 1 d$ in1 [14] $end
$var wire 1 e$ in1 [13] $end
$var wire 1 f$ in1 [12] $end
$var wire 1 g$ in1 [11] $end
$var wire 1 h$ in1 [10] $end
$var wire 1 i$ in1 [9] $end
$var wire 1 j$ in1 [8] $end
$var wire 1 k$ in1 [7] $end
$var wire 1 l$ in1 [6] $end
$var wire 1 m$ in1 [5] $end
$var wire 1 n$ in1 [4] $end
$var wire 1 o$ in1 [3] $end
$var wire 1 p$ in1 [2] $end
$var wire 1 q$ in1 [1] $end
$var wire 1 r$ in1 [0] $end
$var wire 1 s$ in2 [31] $end
$var wire 1 t$ in2 [30] $end
$var wire 1 u$ in2 [29] $end
$var wire 1 v$ in2 [28] $end
$var wire 1 w$ in2 [27] $end
$var wire 1 x$ in2 [26] $end
$var wire 1 y$ in2 [25] $end
$var wire 1 z$ in2 [24] $end
$var wire 1 {$ in2 [23] $end
$var wire 1 |$ in2 [22] $end
$var wire 1 }$ in2 [21] $end
$var wire 1 ~$ in2 [20] $end
$var wire 1 !% in2 [19] $end
$var wire 1 "% in2 [18] $end
$var wire 1 #% in2 [17] $end
$var wire 1 $% in2 [16] $end
$var wire 1 %% in2 [15] $end
$var wire 1 &% in2 [14] $end
$var wire 1 '% in2 [13] $end
$var wire 1 (% in2 [12] $end
$var wire 1 )% in2 [11] $end
$var wire 1 *% in2 [10] $end
$var wire 1 +% in2 [9] $end
$var wire 1 ,% in2 [8] $end
$var wire 1 -% in2 [7] $end
$var wire 1 .% in2 [6] $end
$var wire 1 /% in2 [5] $end
$var wire 1 0% in2 [4] $end
$var wire 1 1% in2 [3] $end
$var wire 1 2% in2 [2] $end
$var wire 1 3% in2 [1] $end
$var wire 1 4% in2 [0] $end
$var wire 1 o" out [31] $end
$var wire 1 p" out [30] $end
$var wire 1 q" out [29] $end
$var wire 1 r" out [28] $end
$var wire 1 s" out [27] $end
$var wire 1 t" out [26] $end
$var wire 1 u" out [25] $end
$var wire 1 v" out [24] $end
$var wire 1 w" out [23] $end
$var wire 1 x" out [22] $end
$var wire 1 y" out [21] $end
$var wire 1 z" out [20] $end
$var wire 1 {" out [19] $end
$var wire 1 |" out [18] $end
$var wire 1 }" out [17] $end
$var wire 1 ~" out [16] $end
$var wire 1 !# out [15] $end
$var wire 1 "# out [14] $end
$var wire 1 ## out [13] $end
$var wire 1 $# out [12] $end
$var wire 1 %# out [11] $end
$var wire 1 &# out [10] $end
$var wire 1 '# out [9] $end
$var wire 1 (# out [8] $end
$var wire 1 )# out [7] $end
$var wire 1 *# out [6] $end
$var wire 1 +# out [5] $end
$var wire 1 ,# out [4] $end
$var wire 1 -# out [3] $end
$var wire 1 .# out [2] $end
$var wire 1 /# out [1] $end
$var wire 1 0# out [0] $end
$upscope $end

$scope module PCMux $end
$var parameter 32 R4 size $end
$var wire 1 $& s $end
$var wire 1 W% in1 [5] $end
$var wire 1 X% in1 [4] $end
$var wire 1 Y% in1 [3] $end
$var wire 1 Z% in1 [2] $end
$var wire 1 [% in1 [1] $end
$var wire 1 \% in1 [0] $end
$var wire 1 ]% in2 [5] $end
$var wire 1 ^% in2 [4] $end
$var wire 1 _% in2 [3] $end
$var wire 1 `% in2 [2] $end
$var wire 1 a% in2 [1] $end
$var wire 1 b% in2 [0] $end
$var wire 1 Q% out [5] $end
$var wire 1 R% out [4] $end
$var wire 1 S% out [3] $end
$var wire 1 T% out [2] $end
$var wire 1 U% out [1] $end
$var wire 1 V% out [0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
b111111 %&
b0 V(
bx W(
bx X(
bx Y(
bx Z(
b0 [(
bx \(
bx ](
x^(
b0 _(
b0 `(
b0 a(
b0 b(
b0 c(
b0 d(
bx e(
b11111111111111111111111111111111 f(
b1 g(
b0 h(
b0 i(
bx j(
bx k(
b0 l(
bx m(
bx n(
b11111111111111111111111111111111 o(
b1 p(
b0 q(
b0 r(
bx s(
bx t(
b11010010110111001110011011101000111001001110101011000110111010001101001011011110110111001001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011101100110010101110010 u(
0v(
0w(
0x(
0y(
0z(
0{(
0|(
0}(
0~(
0!)
bx ")
0#)
0$)
0%)
b0 &)
bx ')
bx ()
bx ))
bx *)
bx +)
bx ,)
0-)
0.)
b0 /)
b0 0)
x1)
02)
03)
04)
05)
06)
07)
08)
09)
0:)
0;)
0<)
b100111101001100010001000101111101000100010000010101010001000001 =)
b10011010011100101001011 >)
1B)
1C)
0D)
0E)
1F)
x#*
bx $*
x%*
x&*
bx '*
x(*
x)*
bx **
x+*
x,*
bx -*
x.*
x/*
bx 0*
x1*
x2*
bx 3*
x4*
x5*
bx 6*
x7*
x8*
bx 9*
x:*
x;*
bx <*
x=*
x>*
bx ?*
x@*
xA*
bx B*
xC*
xD*
bx E*
xF*
xG*
bx H*
xI*
xJ*
bx K*
xL*
xM*
bx N*
xO*
xP*
bx Q*
xR*
xS*
bx T*
xU*
xV*
bx W*
xX*
xY*
bx Z*
x[*
x\*
bx ]*
x^*
x_*
bx `*
xa*
xb*
bx c*
xd*
xe*
bx f*
xg*
xh*
bx i*
xj*
xk*
bx l*
xm*
xn*
bx o*
xp*
xq*
bx r*
xs*
xt*
bx u*
xv*
xw*
bx x*
xy*
xz*
bx {*
x|*
x}*
bx ~*
x!+
x"+
bx #+
x$+
x%+
bx &+
x'+
x(+
bx )+
x*+
x++
bx ,+
x-+
x.+
bx /+
x0+
x1+
bx 2+
x3+
x4+
bx 5+
x6+
x7+
bx 8+
x9+
x:+
bx ;+
x<+
x=+
bx >+
x?+
x@+
bx A+
xB+
xC+
bx D+
xE+
xF+
bx G+
xH+
xI+
bx J+
xK+
xL+
bx M+
xN+
xO+
bx P+
xQ+
xR+
bx S+
xT+
xU+
bx V+
xW+
xX+
bx Y+
xZ+
x[+
bx \+
x]+
x^+
bx _+
x`+
xa+
bx b+
xc+
xd+
bx e+
xf+
xg+
bx h+
xi+
xj+
bx k+
xl+
xm+
bx n+
xo+
xp+
bx q+
xr+
xs+
bx t+
xu+
xv+
bx w+
xx+
xy+
bx z+
x{+
x|+
bx }+
x~+
x!,
bx ",
x#,
x$,
bx %,
x&,
x',
bx (,
x),
x*,
bx +,
x,,
b1100100 -,
b1000100 .,
b1100100 /,
bx 0,
bx 1,
b11010010110111001110011011101000111001001110101011000110111010001101001011011110110111001001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011011010110100101100110 @,
b11010010110111001110011011101000111001001110101011000110111010001101001011011110110111001001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011101100110010101110010 B,
b0 C,
b0 D,
b0 E,
b1100100 F,
b0 G,
b0 H,
b11101010110111001110011 I,
b11010000110010101111000 J,
0K,
0L,
0M,
0N,
1O,
1P,
1Q,
1R,
1S,
1T,
0U,
1V,
1W,
0X,
0Y,
1Z,
0[,
1\,
1],
bx z,
bx |,
bx },
bx ~,
bx !-
x"-
x#-
x$-
x%-
x&-
x'-
b11010010110111001110011011101000111001001110101011000110111010001101001011011110110111001001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011011010110100101100110 =-
b11010010110111001110011011101000111001001110101011000110111010001101001011011110110111001001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011101100110010101110010 ?-
0J-
0K-
0L-
0M-
0N-
0O-
0P-
b0 Q-
b0 \-
1]-
bx g/
bx h/
bx i/
bx j/
bx k/
b0 l/
bx m/
bx n/
xo/
b0 p/
b0 q/
b0 r/
b0 s/
b0 t/
b0 u/
bx v/
b11111111111111111111111111111111 w/
b1 x/
bx y/
b0 z/
bx {/
bx |/
b0 }/
bx ~/
bx !0
b0 "0
b1 #0
b0 $0
b0 %0
bx &0
bx '0
b110010001100001011101000110000101001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011101100110010101110010 (0
x)0
0*0
x+0
0,0
1-0
0.0
0/0
000
110
020
bx 30
040
050
060
b0 70
bx 80
bx 90
bx :0
bx ;0
bx <0
bx =0
1>0
1?0
b0 @0
b0 A0
xB0
0C0
0D0
0E0
0F0
0G0
0H0
0I0
0J0
0K0
0L0
0M0
b100111101001100010001000101111101000100010000010101010001000001 N0
b10011010011100101001011 O0
1S0
1T0
1U0
1V0
1W0
x41
bx 51
x61
x71
bx 81
x91
x:1
bx ;1
x<1
x=1
bx >1
x?1
x@1
bx A1
xB1
xC1
bx D1
xE1
xF1
bx G1
xH1
xI1
bx J1
xK1
xL1
bx M1
xN1
xO1
bx P1
xQ1
xR1
bx S1
xT1
xU1
bx V1
xW1
xX1
bx Y1
xZ1
x[1
bx \1
x]1
x^1
bx _1
x`1
xa1
bx b1
xc1
xd1
bx e1
xf1
xg1
bx h1
xi1
xj1
bx k1
xl1
xm1
bx n1
xo1
xp1
bx q1
xr1
xs1
bx t1
xu1
xv1
bx w1
xx1
xy1
bx z1
x{1
x|1
bx }1
x~1
x!2
bx "2
x#2
x$2
bx %2
x&2
x'2
bx (2
x)2
x*2
bx +2
x,2
x-2
bx .2
x/2
x02
bx 12
x22
x32
bx 42
x52
x62
bx 72
x82
x92
bx :2
x;2
x<2
bx =2
x>2
x?2
bx @2
xA2
xB2
bx C2
xD2
xE2
bx F2
xG2
xH2
bx I2
xJ2
xK2
bx L2
xM2
xN2
bx O2
xP2
xQ2
bx R2
xS2
xT2
bx U2
xV2
xW2
bx X2
xY2
xZ2
bx [2
x\2
x]2
bx ^2
x_2
x`2
bx a2
xb2
xc2
bx d2
xe2
xf2
bx g2
xh2
xi2
bx j2
xk2
xl2
bx m2
xn2
xo2
bx p2
xq2
xr2
bx s2
xt2
xu2
bx v2
xw2
xx2
bx y2
xz2
x{2
bx |2
x}2
x~2
bx !3
x"3
x#3
bx $3
x%3
x&3
bx '3
x(3
x)3
bx *3
x+3
x,3
bx -3
x.3
x/3
bx 03
x13
x23
bx 33
x43
x53
bx 63
x73
x83
bx 93
x:3
x;3
bx <3
x=3
b1100100 >3
b1000100 ?3
b1100100 @3
bx A3
bx B3
b110010001100001011101000110000101001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011011010110100101100110 Q3
b110010001100001011101000110000101001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011101100110010101110010 S3
b0 T3
b0 U3
b0 V3
b1100100 W3
b0 X3
b0 Y3
b11101010110111001110011 Z3
b11101010110111001110011 [3
0\3
0]3
0^3
0_3
1`3
1a3
1b3
1c3
1d3
1e3
0f3
1g3
1h3
0i3
0j3
1k3
0l3
1m3
1n3
bx -4
bx /4
bx 04
bx 14
bx 24
x34
x44
x54
x64
x74
x84
b110010001100001011101000110000101001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011011010110100101100110 N4
b110010001100001011101000110000101001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011101100110010101110010 P4
b110 &&
b100000 M&
b110 N&
b1000000 O&
b1 V&
b1 W&
b1 X&
b0 Y&
b1 f&
b11 p&
b0 s&
b0 x&
b0 ~&
b0 @-
b1000 A-
b100011 B-
b101011 C-
b100 D-
b100000 E-
b100010 F-
b100100 G-
b100101 H-
b101010 I-
b101 R-
b100000 T-
b100000 U-
b11 V-
b0 W-
b1 X-
b10 Y-
b11 Z-
b100 [-
b110 ^-
b100000 ".
b1000 #.
b100000000 $.
b1 +.
b1 ,.
b1 -.
b0 ..
b1 ;.
b11 E.
b0 H.
b0 M.
b0 S.
b100000 Q4
b110 R4
b100000 V'
b110 W'
b1000000 X'
b1 _'
b1 `'
b1 a'
b0 b'
b1 o'
b11 y'
b0 |'
b0 #(
b0 *(
b0 +(
b0 ,(
b0 -(
b0 .(
b0 /(
b1000 0(
b0 1(
b0 2(
b0 3(
b0 4(
b0 5(
b0 6(
b0 7(
b0 8(
b0 9(
b0 :(
b0 ;(
b0 <(
b0 =(
b0 >(
b0 ?(
b0 @(
b0 A(
b1 B(
b1 C(
b0 D(
b0 E(
b1 F(
b0 G(
b0 H(
b0 I(
b0 J(
b1 K(
b0 L(
b0 M(
b0 N(
b1 O(
b0 P(
b0 Q(
b0 R(
b0 S(
b0 T(
b1 U(
b100000 g.
b1000 h.
b100000000 i.
b1 p.
b1 q.
b1 r.
b0 s.
b1 "/
b11 ,/
b0 //
b0 4/
b0 ;/
b0 </
b0 =/
b0 >/
b0 ?/
b0 @/
b1000 A/
b0 B/
b0 C/
b0 D/
b0 E/
b0 F/
b0 G/
b0 H/
b0 I/
b0 J/
b0 K/
b0 L/
b0 M/
b0 N/
b0 O/
b0 P/
b0 Q/
b0 R/
b1 S/
b1 T/
b0 U/
b0 V/
b1 W/
b0 X/
b0 Y/
b0 Z/
b0 [/
b1 \/
b0 ]/
b0 ^/
b0 _/
b1 `/
b0 a/
b0 b/
b0 c/
b0 d/
b1 e/
b1 f/
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 P&
b1001110010011110100111001000101 Q&
b1001110010011110100111001000101 R&
b1001110010011110100111001000101 S&
b1001110010011110100111001000101 T&
b1001110010011110100111001000101 U&
b10000110100110001001111010000110100101100110001 Z&
b10000110100110001001111010000110100101100110001 [&
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 \&
b1001110010011110100111001000101 ]&
b1001110010011110100111001000101 ^&
b10000110100110001001111010000110100101100110001 _&
b10000110100110001001111010000110100101100110001 `&
b10000110100110001001111010000110100101100110001 a&
b1001110010011110100111001000101 b&
b1001110010011110100111001000101 c&
b1001110010011110100111001000101 d&
b1001110010011110100111001000101 e&
b10000100101100101010000010000010101001101010011 g&
b10000100101100101010000010000010101001101010011 h&
b10011100100111101010010010011010100000101001100 i&
b10011100100111101010010010011010100000101001100 j&
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 k&
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 l&
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 m&
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 n&
b100011001000001010011000101001101000101 o&
b100011001000001010011000101001101000101 q&
b10100100100111101001101 r&
b10001000100111101001110010101000101111101000011010000010101001001000101 t&
b10011010011100101001011 u&
b11010010110111001110011011101000111001001110101011000110111010001101001011011110110111001001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011011010110100101100110 v&
b10101010100111001010101010100110100010101000100 w&
b10011010100000101011000001000000011000100110000 y&
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 z&
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 {&
b10011110100011001000110 |&
b100011001000001010011000101001101000101 }&
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 %.
b1001110010011110100111001000101 &.
b1001110010011110100111001000101 '.
b1001110010011110100111001000101 (.
b1001110010011110100111001000101 ).
b1001110010011110100111001000101 *.
b10000110100110001001111010000110100101100110001 /.
b10000110100110001001111010000110100101100110001 0.
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 1.
b1001110010011110100111001000101 2.
b1001110010011110100111001000101 3.
b10000110100110001001111010000110100101100110001 4.
b10000110100110001001111010000110100101100110001 5.
b10000110100110001001111010000110100101100110001 6.
b1001110010011110100111001000101 7.
b1001110010011110100111001000101 8.
b1001110010011110100111001000101 9.
b1001110010011110100111001000101 :.
b10000100101100101010000010000010101001101010011 <.
b10000100101100101010000010000010101001101010011 =.
b10011100100111101010010010011010100000101001100 >.
b10011100100111101010010010011010100000101001100 ?.
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 @.
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 A.
b1001110010001010101011101011111010001000100000101010100010000010101111101010111010010010101010001001000010111110100111001000010010001010101111101010010010001010100000101000100 B.
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 C.
b100011001000001010011000101001101000101 D.
b100011001000001010011000101001101000101 F.
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 G.
b10001000100111101001110010101000101111101000011010000010101001001000101 I.
b10011010011100101001011 J.
b110010001100001011101000110000101001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011011010110100101100110 K.
b10101010100111001010101010100110100010101000100 L.
b10011010100000101011000001000000011000100110000 N.
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 O.
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 P.
b10011110100011001000110 Q.
b100011001000001010011000101001101000101 R.
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 Y'
b1001110010011110100111001000101 Z'
b1001110010011110100111001000101 ['
b1001110010011110100111001000101 \'
b1001110010011110100111001000101 ]'
b1001110010011110100111001000101 ^'
b10000110100110001001111010000110100101100110001 c'
b10000110100110001001111010000110100101100110001 d'
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 e'
b1001110010011110100111001000101 f'
b1001110010011110100111001000101 g'
b10000110100110001001111010000110100101100110001 h'
b10000110100110001001111010000110100101100110001 i'
b10000110100110001001111010000110100101100110001 j'
b1001110010011110100111001000101 k'
b1001110010011110100111001000101 l'
b1001110010011110100111001000101 m'
b1001110010011110100111001000101 n'
b10000100101100101010000010000010101001101010011 p'
b10000100101100101010000010000010101001101010011 q'
b10011100100111101010010010011010100000101001100 r'
b10011100100111101010010010011010100000101001100 s'
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 t'
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 u'
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 v'
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 w'
b100011001000001010011000101001101000101 x'
b100011001000001010011000101001101000101 z'
b10100100100111101001101 {'
b10001000100111101001110010101000101111101000011010000010101001001000101 }'
b10011010011100101001011 ~'
b11010010110111001110011011101000111001001110101011000110111010001101001011011110110111001001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011011010110100101100110 !(
b10101010100111001010101010100110100010101000100 "(
b10011010100000101011000001000000011000100110000 $(
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 %(
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 &(
b10011110100011001000110 '(
b100011001000001010011000101001101000101 ((
b10011110100011001000110 )(
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 j.
b1001110010011110100111001000101 k.
b1001110010011110100111001000101 l.
b1001110010011110100111001000101 m.
b1001110010011110100111001000101 n.
b1001110010011110100111001000101 o.
b10000110100110001001111010000110100101100110001 t.
b10000110100110001001111010000110100101100110001 u.
b10101010100111001010010010001010100011101001001010100110101010001000101010100100100010101000100 v.
b1001110010011110100111001000101 w.
b1001110010011110100111001000101 x.
b10000110100110001001111010000110100101100110001 y.
b10000110100110001001111010000110100101100110001 z.
b10000110100110001001111010000110100101100110001 {.
b1001110010011110100111001000101 |.
b1001110010011110100111001000101 }.
b1001110010011110100111001000101 ~.
b1001110010011110100111001000101 !/
b10000100101100101010000010000010101001101010011 #/
b10000100101100101010000010000010101001101010011 $/
b10011100100111101010010010011010100000101001100 %/
b10011100100111101010010010011010100000101001100 &/
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 '/
b10101010101001101000101010111110100100101001110010100000101010101010100010111110100001101001100010010110100010101001110 (/
b1001110010001010101011101011111010001000100000101010100010000010101111101010111010010010101010001001000010111110100111001000010010001010101111101010010010001010100000101000100 )/
b100111001000101010101110101111101000100010000010101010001000001010111110100111001001111010111110100111001000010010001010101111101010010010001010100000101000100 */
b100011001000001010011000101001101000101 +/
b100011001000001010011000101001101000101 -/
b101001101001001010011100100011101001100010001010101111101010000010011110101001001010100 ./
b10001000100111101001110010101000101111101000011010000010101001001000101 0/
b10011010011100101001011 1/
b110010001100001011101000110000101001101011001010110110101101111011100100111100101001001011011100110100101110100011010010110000101101100011010010111101001100001011101000110100101101111011011100100011001101001011011000110010100101110011011010110100101100110 2/
b10101010100111001010101010100110100010101000100 3/
b10011010100000101011000001000000011000100110000 5/
b10001010100111001000001010000100100110001000101010111110101001001010101010011100101010001001001010011010100010101011111010011010100111101000100001111010100111001001111 6/
b1100001011011000111010001110011011110010110111001100011011100100110000101101101 7/
b10011110100011001000110 8/
b100011001000001010011000101001101000101 9/
b10011110100011001000110 :/
b1000 ?)
b1000000 _)
b10 `)
b0 a)
b0 b)
bx c)
bx d)
b10 e)
bx f)
bx g)
bx h)
bx i)
bx j)
bx k)
bx l)
bx m)
bx n)
bx o)
bx p)
bx q)
bx r)
bx s)
bx t)
bx u)
bx v)
bx w)
bx x)
bx y)
b0 z)
bx {)
bx |)
bx })
bx ~)
bx 2,
bx 3,
bx 4,
bx 5,
bx 6,
bx 7,
bx 8,
bx 9,
bx :,
bx ;,
bx <,
bx =,
bx >,
bx ?,
b100000 A,
b100000 ^,
b100000000 _,
b0 `,
b10000000000000000000000000000011 a,
b10000000000000000000000000000100 b,
b11111111111111111111111111111111 c,
bx d,
b11111111111111111111111111111111 e,
bx f,
bx g,
bx h,
bx i,
b0 j,
b0 k,
b0 l,
b0 m,
b0 n,
b0 o,
b0 p,
b0 q,
b0 r,
b0 s,
b0 t,
b0 u,
b10101 v,
b0 w,
b0 x,
b0 y,
bx {,
bx (-
bx )-
bx *-
bx +-
bx ,-
bx --
bx .-
bx /-
bx 0-
bx 1-
bx 2-
bx 3-
bx 4-
bx 5-
bx 6-
bx 7-
bx 8-
bx 9-
bx :-
bx ;-
bx <-
b100000 >-
b100000 S-
b1000 P0
b100000000 p0
b10 q0
b0 r0
b0 s0
bx t0
bx u0
b10 v0
bx w0
bx x0
bx y0
bx z0
bx {0
bx |0
bx }0
bx ~0
bx !1
bx "1
bx #1
bx $1
bx %1
bx &1
bx '1
bx (1
bx )1
bx *1
bx +1
bx ,1
b0 -1
bx .1
bx /1
bx 01
bx 11
bx C3
bx D3
bx E3
bx F3
bx G3
bx H3
bx I3
bx J3
bx K3
bx L3
bx M3
bx N3
bx O3
bx P3
b100000 R3
b100000 o3
b100000000 p3
b0 q3
b10000000000000000000000000000100 r3
b10000000000000000000000000000011 s3
b11111111111111111111111111111111 t3
bx u3
b11111111111111111111111111111111 v3
bx w3
bx x3
bx y3
bx z3
b0 {3
b0 |3
b0 }3
b0 ~3
b0 !4
b0 "4
b0 #4
b0 $4
b0 %4
b0 &4
b0 '4
b0 (4
b11011 )4
b0 *4
b0 +4
b0 ,4
bx .4
bx 94
bx :4
bx ;4
bx <4
bx =4
bx >4
bx ?4
bx @4
bx A4
bx B4
bx C4
bx D4
bx E4
bx F4
bx G4
bx H4
bx I4
bx J4
bx K4
bx L4
bx M4
b100000 O4
b0 !*
b0 "*
b0 21
b0 31
1Q0
1R0
0X0
0Y0
0Z0
0[0
0\0
0]0
0^0
0_0
0`0
0a0
0b0
1c0
1d0
1e0
1f0
1g0
1h0
1i0
1j0
1k0
1l0
1m0
1n0
1o0
0N"
0M"
1_-
1,&
0+&
0*&
0)&
0(&
0'&
0"'
0!'
1$'
1#'
1E'
1D'
1C'
1B'
1A'
1@'
1?'
1>'
1='
1<'
1;'
1:'
19'
18'
17'
16'
15'
14'
13'
12'
11'
10'
1/'
1.'
1-'
1,'
1+'
1*'
1)'
1('
1''
1&'
1%'
1K'
1J'
1I'
1H'
1G'
1O'
1N'
0Q'
0P'
1F'
0M'
0L'
0R'
0U'
0T'
0S'
0T.
1U.
1V.
1\.
1[.
1Z.
1Y.
1X.
1`.
1_.
0b.
0a.
1W.
0^.
0].
0c.
0f.
0e.
0d.
1(
1'
1&
1%
1$
1#
zH
zG
zF
zE
zD
zC
zB
zA
z@
z?
z>
z=
z<
z;
z:
z9
z8
z7
z6
z5
z4
z3
z2
z1
z0
z/
z.
z-
z,
z+
z*
z)
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0*!
0)!
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
0J%
0I%
0H%
0G%
0F%
0E%
0P%
0O%
0N%
0M%
0L%
0K%
0V%
0U%
0T%
0S%
0R%
0Q%
0\%
0[%
0Z%
0Y%
0X%
0W%
1b%
1a%
1`%
1_%
1^%
1]%
0g%
0f%
0e%
0d%
0c%
0l%
0k%
0j%
0i%
0h%
0q%
0p%
0o%
0n%
0m%
0v%
0u%
0t%
0s%
0r%
0y%
0x%
0w%
0z%
0{%
0|%
0}%
0~%
0!&
0"&
1#&
0$&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
06&
05&
04&
03&
02&
01&
00&
0/&
0.&
0-&
1@)
1A)
0G)
0H)
0I)
0J)
0K)
0L)
0M)
0N)
0O)
0P)
0Q)
1R)
1S)
1T)
1U)
1V)
1W)
1X)
1Y)
1Z)
1[)
1\)
1])
1^)
0!.
0~-
0}-
0|-
0{-
0z-
0y-
0x-
0w-
0v-
0u-
0t-
0s-
0r-
0q-
0p-
0o-
0n-
0m-
0l-
0k-
0j-
0i-
0h-
0g-
0f-
0e-
0d-
0c-
0b-
0a-
0`-
$end
#4000
1"
1N"
1J-
1O-
0O-
1z%
#5000
1!
1M"
0_-
0>0
b0 %&
1-)
1D)
1E)
1z(
b11111111111111111111111111111111 V(
b0 o(
1~(
1x(
0(
0'
0&
0%
0$
0#
1\%
0b%
0a%
0`%
0_%
0^%
0]%
1V%
b100000000000010000000000000101 a(
b100000000000010000000000000101 `(
1L&
1J&
1<&
1/&
1n"
1l"
1^"
1Q"
1l%
1D%
1B%
12$
10$
1b%
1`%
1G%
1P%
1N%
0J-
1O-
1P-
0z%
1!&
1"&
1v%
1R$
1P$
b101 \-
1r$
1p$
10#
1.#
0]-
0#&
#10000
0!
0M"
1_-
1>0
0-0
b0 g/
b101 y/
0+0
0)0
0-)
#15000
1!
1M"
0_-
0>0
b1 %&
1-)
0z(
b1 h(
1p#
1n#
1h
1f
1(
0\%
1[%
0b%
1a%
0V%
1U%
b100000000000101111111111111011 a(
b100000000000101111111111111011 `(
1K&
0J&
1I&
1H&
1G&
1F&
1E&
1D&
1C&
1B&
1A&
1@&
1?&
1>&
1=&
0<&
1;&
1m"
0l"
1k"
1j"
1i"
1h"
1g"
1f"
1e"
1d"
1c"
1b"
1a"
1`"
1_"
0^"
1]"
0l%
1k%
1q%
1p%
1o%
1n%
1m%
1C%
0B%
1A%
1@%
1?%
1>%
1=%
1<%
1;%
1:%
19%
18%
17%
16%
15%
11$
00$
1/$
1.$
1-$
1,$
1+$
1*$
1)$
1($
1'$
1&$
1%$
1$$
1#$
1"$
1!$
1~#
1}#
1|#
1{#
1z#
1y#
1x#
1w#
1v#
1u#
1t#
1s#
1r#
1q#
0a%
1_%
1^%
1]%
0v%
1u%
0p#
0n#
1Q$
0P$
1O$
1N$
1M$
1L$
1K$
1J$
1I$
1H$
1G$
1F$
1E$
1D$
1C$
1B$
1A$
1@$
1?$
1>$
1=$
1<$
1;$
1:$
19$
18$
17$
16$
15$
14$
13$
1O%
0N%
1M%
1L%
1K%
b11111111111111111111111111111011 \-
1q$
0p$
1o$
1n$
1m$
1l$
1k$
1j$
1i$
1h$
1g$
1f$
1e$
1d$
1c$
1b$
1a$
1`$
1_$
1^$
1]$
1\$
1[$
1Z$
1Y$
1X$
1W$
1V$
1U$
1T$
1S$
1/#
0.#
1-#
1,#
1+#
1*#
1)#
1(#
1'#
1&#
1%#
1$#
1##
1"#
1!#
1~"
1}"
1|"
1{"
1z"
1y"
1x"
1w"
1v"
1u"
1t"
1s"
1r"
1q"
1p"
1o"
0O-
0P-
1O-
1P-
#20000
0!
0M"
1_-
1>0
1-0
b11111011 y/
0-)
#25000
1!
1M"
0_-
0>0
b10 %&
1-)
1z(
b10 h(
1p#
1o#
1m#
1l#
1k#
1j#
1i#
1h#
1g#
1f#
1e#
1d#
1c#
1b#
1a#
1`#
1_#
1^#
1]#
1\#
1[#
1Z#
1Y#
1X#
1W#
1V#
1U#
1T#
1S#
1R#
1Q#
1*!
1)!
1'!
1&!
1%!
1$!
1#!
1"!
1!!
1~
1}
1|
1{
1z
1y
1x
1w
1v
1u
1t
1s
1r
1q
1p
1o
1n
1m
1l
1k
1j
1i
0(
1'
1\%
1b%
1V%
b10000010001100000100000 a(
b10000010001100000100000 `(
0L&
0K&
0I&
0H&
0F&
0E&
0D&
0C&
0B&
0?&
0>&
0=&
1<&
0;&
16&
0/&
0n"
0m"
0k"
0j"
0h"
0g"
0f"
0e"
0d"
0a"
0`"
0_"
1^"
0]"
1X"
0Q"
1f%
1l%
0k%
0o%
0n%
0m%
0D%
0C%
0A%
0@%
0>%
0=%
0<%
0;%
0:%
07%
06%
05%
02$
01$
0/$
0.$
0,$
0+$
0*$
0)$
0($
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0b%
1a%
0`%
0_%
0^%
1v%
0u%
0o#
1n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0R$
0Q$
0O$
0N$
0L$
0K$
0J$
0I$
0H$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
1P#
1O#
1M#
1L#
1K#
1J#
1I#
1H#
1G#
1F#
1E#
1D#
1C#
1B#
1A#
1@#
1?#
1>#
1=#
1<#
1;#
1:#
19#
18#
17#
16#
15#
14#
13#
12#
11#
0G%
0P%
0O%
0M%
0L%
b1100000011011 \-
0m$
0l$
0k$
0j$
0i$
0h$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0+#
0*#
0)#
0(#
0'#
0&#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0O-
0P-
1J-
1O-
0"&
1z%
1u%
1R$
1P$
0M$
0G$
0F$
b0 \-
0r$
0q$
0o$
0n$
0g$
0f$
00#
0/#
0-#
0,#
0%#
0$#
1]-
1#&
#30000
0!
0M"
1_-
1>0
0-0
b101 g/
b0 y/
0-)
#35000
1!
1M"
0_-
0>0
b11 %&
1-)
0z(
b11 h(
1(
0\%
0[%
1Z%
1b%
0V%
0U%
1T%
b100000000001000000000000001111 a(
b100000000001000000000000001111 `(
1L&
1K&
1J&
1I&
0G&
0A&
0@&
0<&
1:&
06&
1/&
1n"
1m"
1l"
1k"
0i"
0c"
0b"
0^"
1\"
0X"
1Q"
0f%
0l%
1j%
0q%
0p%
1D%
1C%
1B%
1A%
0?%
09%
08%
12$
11$
10$
1/$
0-$
0'$
0&$
0b%
1^%
0]%
0v%
0u%
0p#
0n#
0R$
0P$
0P#
0O#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
1G%
1P%
1O%
1N%
1M%
0K%
0J-
0O-
1O-
1P-
0z%
1"&
1t%
1R$
1Q$
1P$
1O$
b1111 \-
1r$
1q$
1p$
1o$
10#
1/#
1.#
1-#
0]-
0#&
#40000
0!
0M"
1_-
1>0
1-0
b0 g/
b1111 y/
0-)
#45000
1!
1M"
0_-
0>0
b100 %&
1-)
1z(
b100 h(
1p#
1o#
1n#
1m#
1j!
1i!
1h!
1g!
0(
0'
1&
1\%
1b%
1V%
b10101100000001000000000000000000 a(
b10101100000001000000000000000000 `(
0L&
0K&
0J&
0I&
12&
11&
1-&
0n"
0m"
0l"
0k"
1T"
1S"
1O"
0D%
0C%
0B%
0A%
02$
01$
00$
0/$
0b%
0a%
1`%
0^%
0R$
0Q$
0P$
0O$
1J%
1I%
1E%
0P%
0O%
0N%
0M%
b0 \-
0r$
0q$
0p$
0o$
00#
0/#
0.#
0-#
1]-
1#&
0O-
0P-
1N-
1P-
0!&
1~%
#50000
0!
0M"
1_-
1>0
0-0
1/0
b1111 g/
b0 y/
1)0
0-)
b1100001101010000 21
b0 h/
b0 .1
b0 01
b1 11
b0 z0
b1 h/
b1 .1
b1 z0
b11 h/
b10 .1
b10 z0
b111 h/
b11 .1
b11 z0
b1111 h/
b100 .1
b100 z0
b101 .1
b101 z0
b110 .1
b110 z0
b111 .1
b111 z0
b1000 .1
b1000 z0
b1001 .1
b1001 z0
b1010 .1
b1010 z0
b1011 .1
b1011 z0
b1100 .1
b1100 z0
b1101 .1
b1101 z0
b1110 .1
b1110 z0
b1111 .1
b1111 z0
b10000 .1
b10000 z0
b10001 .1
b10001 z0
b10010 .1
b10010 z0
b10011 .1
b10011 z0
b10100 .1
b10100 z0
b10101 .1
b10101 z0
b10110 .1
b10110 z0
b10111 .1
b10111 z0
b11000 .1
b11000 z0
b11001 .1
b11001 z0
b11010 .1
b11010 z0
b11011 .1
b11011 z0
b11100 .1
b11100 z0
b11101 .1
b11101 z0
b11110 .1
b11110 z0
b11111 .1
b11111 z0
b100000 .1
b100000 z0
#55000
1!
1M"
0_-
0>0
b101 %&
1-)
0z(
b101 h(
1(
0\%
1[%
1b%
0V%
1U%
b10101100000000010000000000000010 a(
b10101100000000010000000000000010 `(
1K&
1<&
0:&
1m"
1^"
0\"
1l%
0j%
1C%
11$
1a%
1v%
0t%
0o#
0m#
1Q$
1O%
b10 \-
1q$
1/#
0]-
0#&
0N-
0P-
1N-
1P-
#60000
0!
0M"
1_-
1>0
1-0
0/0
b101 g/
b10 y/
0-)
b10 }/
b1110101001100000 21
b0 h/
b1000000 .1
b0 z0
b1 h/
b1000001 .1
b1 z0
b1000010 .1
b10 z0
b101 h/
b1000011 .1
b11 z0
b1000100 .1
b100 z0
b1000101 .1
b101 z0
b1000110 .1
b110 z0
b1000111 .1
b111 z0
b1001000 .1
b1000 z0
b1001001 .1
b1001 z0
b1001010 .1
b1010 z0
b1001011 .1
b1011 z0
b1001100 .1
b1100 z0
b1001101 .1
b1101 z0
b1001110 .1
b1110 z0
b1001111 .1
b1111 z0
b1010000 .1
b10000 z0
b1010001 .1
b10001 z0
b1010010 .1
b10010 z0
b1010011 .1
b10011 z0
b1010100 .1
b10100 z0
b1010101 .1
b10101 z0
b1010110 .1
b10110 z0
b1010111 .1
b10111 z0
b1011000 .1
b11000 z0
b1011001 .1
b11001 z0
b1011010 .1
b11010 z0
b1011011 .1
b11011 z0
b1011100 .1
b11100 z0
b1011101 .1
b11101 z0
b1011110 .1
b11110 z0
b1011111 .1
b11111 z0
b1100000 .1
b100000 z0
#65000
1!
1M"
0_-
0>0
b110 %&
1-)
1z(
b110 h(
0(
1'
1\%
0b%
0a%
0`%
1_%
1V%
b10001100000001010000000000000000 a(
b10001100000001010000000000000000 `(
0K&
1:&
0/&
0m"
1\"
0Q"
1j%
0C%
01$
1a%
1`%
0_%
1t%
0p#
0n#
0Q$
0G%
0O%
b0 \-
0q$
0/#
1]-
1#&
0N-
0P-
1L-
1O-
1P-
1M-
0~%
1|%
1!&
1}%
#70000
0!
0M"
1_-
1>0
0-0
1/0
b0 g/
b0 y/
1+0
0)0
0-)
b1111 r/
b1111 q/
1!.
1~-
1}-
1|-
14%
13%
12%
11%
10#
1/#
1.#
1-#
#75000
1!
1M"
0_-
0>0
b111 %&
1-)
0z(
b111 h(
1p#
1o#
1n#
1m#
1,"
1+"
1*"
1)"
1(
0\%
0[%
0Z%
1Y%
1b%
0V%
0U%
0T%
1S%
b10001100000001100000000000000010 a(
b10001100000001100000000000000010 `(
1K&
0<&
1;&
1m"
0^"
1]"
0l%
1k%
1C%
11$
0a%
0`%
1_%
0v%
1u%
0p#
0o#
0n#
0m#
1Q$
1O%
b10 \-
1q$
0]-
0#&
0L-
0M-
0O-
0P-
1L-
1O-
1P-
1M-
#80000
0!
0M"
1_-
1>0
1-0
b10 y/
0-)
b101 r/
b101 q/
0~-
0|-
03%
01%
0/#
0-#
#85000
1!
1M"
0_-
0>0
b1000 %&
1-)
1z(
b1000 h(
1p#
1n#
1L"
1J"
0(
0'
0&
1%
1\%
0b%
1a%
1V%
b10000001000100000000000000010 a(
b10000001000100000000000000010 `(
0:&
17&
02&
01&
10&
0-&
0\"
1Y"
0T"
0S"
1R"
0O"
1g%
0j%
0t%
1o#
0n#
1m#
1l#
1k#
1j#
1i#
1h#
1g#
1f#
1e#
1d#
1c#
1b#
1a#
1`#
1_#
1^#
1]#
1\#
1[#
1Z#
1Y#
1X#
1W#
1V#
1U#
1T#
1S#
1R#
1Q#
1P#
1N#
0J%
0I%
1H%
0E%
b111 \-
1r$
1p$
0L-
0M-
0O-
0P-
1K-
b1 Q-
0|%
0}%
0!&
0"&
1{%
1/#
1R$
1O$
1N$
1M$
1L$
1K$
1J$
1I$
1H$
1G$
1F$
1E$
1D$
1C$
1B$
1A$
1@$
1?$
1>$
1=$
1<$
1;$
1:$
19$
18$
17$
16$
15$
14$
13$
1y%
b1010 \-
0r$
0p$
1o$
00#
0.#
1-#
#90000
0!
0M"
1_-
1>0
0-0
b11111111111111111111111111111011 g/
b1010 y/
0+0
0-)
#95000
1!
1M"
0_-
0>0
b1001 %&
1-)
0z(
b1001 h(
1(
0\%
1[%
1b%
0V%
1U%
b1000100000100000100000 a(
b1000100000100000100000 `(
0K&
1G&
1A&
00&
0m"
1i"
1c"
0R"
1q%
0C%
1?%
19%
01$
1-$
1'$
0a%
1]%
0H%
0O%
1K%
0K-
b0 Q-
1J-
1O-
0{%
1z%
1!&
1v%
0u%
0y%
b0 \-
0q$
0o$
0/#
0-#
1]-
1#&
#100000
0!
0M"
1_-
1>0
1-0
b0 y/
0-)
#105000
1!
1M"
0_-
0>0
b1010 %&
1-)
1z(
b1010 h(
0h
0f
0(
1'
1\%
0b%
1a%
1V%
0P#
0N#
b11111111111111111111111111111011 \-
b10000100001000000100000 a(
1r$
1q$
1o$
1n$
1m$
1l$
1k$
1j$
1i$
1h$
1g$
1f$
1e$
1d$
1c$
1b$
1a$
1`$
1_$
1^$
1]$
1\$
1[$
1Z$
1Y$
1X$
1W$
1V$
1U$
1T$
1S$
10#
1/#
1-#
1,#
1+#
1*#
1)#
1(#
1'#
1&#
1%#
1$#
1##
1"#
1!#
1~"
1}"
1|"
1{"
1z"
1y"
1x"
1w"
1v"
1u"
1t"
1s"
1r"
1q"
1p"
1o"
0]-
0#&
b10000100001000000100000 `(
0A&
1@&
07&
16&
0c"
1b"
0Y"
1X"
0g%
1f%
0q%
1p%
09%
18%
0'$
1&$
0v%
1u%
1P#
1O#
1M#
1L#
1K#
1J#
1I#
1H#
1G#
1F#
1E#
1D#
1C#
1B#
1A#
1@#
1?#
1>#
1=#
1<#
1;#
1:#
19#
18#
17#
16#
15#
14#
13#
12#
11#
b11111111111111111111111111110110 \-
0r$
1p$
0o$
00#
1.#
0-#
#110000
0!
0M"
1_-
1>0
0-0
b11110110 y/
0-)
