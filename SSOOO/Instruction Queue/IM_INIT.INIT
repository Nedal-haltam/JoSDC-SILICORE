






// `define invalid_instruction_memory
// `define invalid_data_memory
// `define simple
// `define insertion
// `define bubble
// `define binary


`define matmul
// `define threesome
// `define dec


`ifdef matmul
InstMem[ 0] <= 32'h20080024;// addi $8 $0 36
InstMem[ 1] <= 32'h20090024;// addi $9 $0 36
InstMem[ 2] <= 32'h200A0024;// addi $10 $0 36
InstMem[ 3] <= 32'h00005820;// add $11 $0 $0
InstMem[ 4] <= 32'h00006020;// add $12 $0 $0
InstMem[ 5] <= 32'h00006820;// add $13 $0 $0
InstMem[ 6] <= 32'h340E0000;// ori $14 $0 0
InstMem[ 7] <= 32'h340F0000;// ori $15 $0 0
InstMem[ 8] <= 32'h34100000;// ori $16 $0 0
InstMem[ 9] <= 32'h00006020;// add $12 $0 $0
InstMem[10] <= 32'h00006820;// add $13 $0 $0
InstMem[11] <= 32'h0120C020;// add $24 $9 $0
InstMem[12] <= 32'h0160C820;// add $25 $11 $0
InstMem[13] <= 32'h0C00002A;// jal mul_fun
InstMem[14] <= 32'h02ED9020;// add $18 $23 $13
InstMem[15] <= 32'h8E530000;// lw $19 0 ( $18 )
InstMem[16] <= 32'h0140C020;// add $24 $10 $0
InstMem[17] <= 32'h01A0C820;// add $25 $13 $0
InstMem[18] <= 32'h0C00002A;// jal mul_fun
InstMem[19] <= 32'h02EC9020;// add $18 $23 $12
InstMem[20] <= 32'h8E540514;// lw $20 1300 ( $18 )
InstMem[21] <= 32'h0260C020;// add $24 $19 $0
InstMem[22] <= 32'h0280C820;// add $25 $20 $0
InstMem[23] <= 32'h0C00002A;// jal mul_fun
InstMem[24] <= 32'h02E0A820;// add $21 $23 $0
InstMem[25] <= 32'h0140C020;// add $24 $10 $0
InstMem[26] <= 32'h0160C820;// add $25 $11 $0
InstMem[27] <= 32'h0C00002A;// jal mul_fun
InstMem[28] <= 32'h02EC9020;// add $18 $23 $12
InstMem[29] <= 32'h8E570A28;// lw $23 2600 ( $18 )
InstMem[30] <= 32'h02B7A820;// add $21 $21 $23
InstMem[31] <= 32'hAE550A28;// sw $21 2600 ( $18 )
InstMem[32] <= 32'h21AD0001;// addi $13 $13 1
InstMem[33] <= 32'h01A9882A;// slt $17 $13 $9
InstMem[34] <= 32'h1620FFE9;// bne $17 $0 -23
InstMem[35] <= 32'h218C0001;// addi $12 $12 1
InstMem[36] <= 32'h018A882A;// slt $17 $12 $10
InstMem[37] <= 32'h1620FFE5;// bne $17 $0 -27
InstMem[38] <= 32'h216B0001;// addi $11 $11 1
InstMem[39] <= 32'h0168882A;// slt $17 $11 $8
InstMem[40] <= 32'h1620FFE1;// bne $17 $0 -31
InstMem[41] <= 32'h08000034;// j finish
InstMem[42] <= 32'h30170000;// andi $23 $0 0
InstMem[43] <= 32'h2336FFFF;// addi $22 $25 -1
InstMem[44] <= 32'h02C0082A;// slt $at $22 $0
InstMem[45] <= 32'h10200002;// beq $at $0 2
InstMem[46] <= 32'h03E00008;// jr $31
InstMem[47] <= 32'h02F8B820;// add $23 $23 $24
InstMem[48] <= 32'h22D6FFFF;// addi $22 $22 -1
InstMem[49] <= 32'h02C0082A;// slt $at $22 $0
InstMem[50] <= 32'h1020FFFD;// beq $at $0 -3
InstMem[51] <= 32'h03E00008;// jr $31
InstMem[52] <= 32'h00000000;// nop
InstMem[53] <= 32'hFC000000;// hlt
InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt
`endif

`ifdef threesome
InstMem[ 0] <= 32'h201D0FA0;// addi $29 $0 4000
InstMem[ 1] <= 32'h200405DC;// addi $4 $0 1500
InstMem[ 2] <= 32'h20050000;// addi $5 $0 0
InstMem[ 3] <= 32'h200605DB;// addi $6 $0 1499
InstMem[ 4] <= 32'h0C000040;// jal mergesort
InstMem[ 5] <= 32'h200805DC;// addi $8 $0 1500
InstMem[ 6] <= 32'h200905DC;// addi $9 $0 1500
InstMem[ 7] <= 32'h200A0000;// addi $10 $0 0
InstMem[ 8] <= 32'h200B0000;// addi $11 $0 0
InstMem[ 9] <= 32'h0169082A;// slt $1 $11 $9
InstMem[10] <= 32'h10200035;// beq $1 $0 53
InstMem[11] <= 32'h212CFFFE;// addi $12 $9 -2
InstMem[12] <= 32'h016C082A;// slt $1 $11 $12
InstMem[13] <= 32'h10200032;// beq $1 $0 50
InstMem[14] <= 32'h11600006;// beq $11 $0 6
InstMem[15] <= 32'h000B6800;// sll $13 $11 0
InstMem[16] <= 32'h010D7020;// add $14 $8 $13
InstMem[17] <= 32'h8DCF0000;// lw $15 0 ( $14 )
InstMem[18] <= 32'h8DD8FFFF;// lw $24 -1 ( $14 )
InstMem[19] <= 32'h11F8002A;// beq $15 $24 42
InstMem[20] <= 32'h21790001;// addi $25 $11 1
InstMem[21] <= 32'h2130FFFF;// addi $16 $9 -1
InstMem[22] <= 32'h0330082A;// slt $1 $25 $16
InstMem[23] <= 32'h10200026;// beq $1 $0 38
InstMem[24] <= 32'h000B8800;// sll $17 $11 0
InstMem[25] <= 32'h01119020;// add $18 $8 $17
InstMem[26] <= 32'h8E530000;// lw $19 0 ( $18 )
InstMem[27] <= 32'h0019A000;// sll $20 $25 0
InstMem[28] <= 32'h0114A820;// add $21 $8 $20
InstMem[29] <= 32'h8EB60000;// lw $22 0 ( $21 )
InstMem[30] <= 32'h0010B800;// sll $23 $16 0
InstMem[31] <= 32'h01176820;// add $13 $8 $23
InstMem[32] <= 32'h8DAE0000;// lw $14 0 ( $13 )
InstMem[33] <= 32'h02767820;// add $15 $19 $22
InstMem[34] <= 32'h01EE7820;// add $15 $15 $14
InstMem[35] <= 32'h15E00014;// bne $15 $0 20
InstMem[36] <= 32'h214A0001;// addi $10 $10 1
InstMem[37] <= 32'h23390001;// addi $25 $25 1
InstMem[38] <= 32'h2210FFFF;// addi $16 $16 -1
InstMem[39] <= 32'h0330082A;// slt $1 $25 $16
InstMem[40] <= 32'h10200015;// beq $1 $0 21
InstMem[41] <= 32'h00198800;// sll $17 $25 0
InstMem[42] <= 32'h01119020;// add $18 $8 $17
InstMem[43] <= 32'h8E530000;// lw $19 0 ( $18 )
InstMem[44] <= 32'h8E54FFFF;// lw $20 -1 ( $18 )
InstMem[45] <= 32'h16740003;// bne $19 $20 3
InstMem[46] <= 32'h23390001;// addi $25 $25 1
InstMem[47] <= 32'h08000027;// j skip_left_duplicates
InstMem[48] <= 32'h00108800;// sll $17 $16 0
InstMem[49] <= 32'h01119020;// add $18 $8 $17
InstMem[50] <= 32'h8E530000;// lw $19 0 ( $18 )
InstMem[51] <= 32'h8E540001;// lw $20 1 ( $18 )
InstMem[52] <= 32'h1674FFE2;// bne $19 $20 -30
InstMem[53] <= 32'h2210FFFF;// addi $16 $16 -1
InstMem[54] <= 32'h08000030;// j skip_right_duplicates
InstMem[55] <= 32'h01E0082A;// slt $at $15 $0
InstMem[56] <= 32'h14200003;// bne $at $0 3
InstMem[57] <= 32'h2210FFFF;// addi $16 $16 -1
InstMem[58] <= 32'h08000016;// j inner_loop
InstMem[59] <= 32'h23390001;// addi $25 $25 1
InstMem[60] <= 32'h08000016;// j inner_loop
InstMem[61] <= 32'h216B0001;// addi $11 $11 1
InstMem[62] <= 32'h08000009;// j outer_loop
InstMem[63] <= 32'h0800009F;// j exit
InstMem[64] <= 32'h00A6082A;// slt $1 $5 $6
InstMem[65] <= 32'h10200016;// beq $1 $0 22
InstMem[66] <= 32'h23BDFFFC;// addi $29 $29 -4
InstMem[67] <= 32'hAFBF0003;// sw $31 3 ( $29 )
InstMem[68] <= 32'hAFA50002;// sw $5 2 ( $29 )
InstMem[69] <= 32'hAFA60001;// sw $6 1 ( $29 )
InstMem[70] <= 32'h00A68020;// add $16 $5 $6
InstMem[71] <= 32'h00108042;// srl $16 $16 1
InstMem[72] <= 32'hAFB00000;// sw $16 0 ( $29 )
InstMem[73] <= 32'h02003020;// add $6 $16 $0
InstMem[74] <= 32'h0C000040;// jal mergesort
InstMem[75] <= 32'h8FB00000;// lw $16 0 ( $29 )
InstMem[76] <= 32'h22110001;// addi $17 $16 1
InstMem[77] <= 32'h02202820;// add $5 $17 $0
InstMem[78] <= 32'h8FA60001;// lw $6 1 ( $29 )
InstMem[79] <= 32'h0C000040;// jal mergesort
InstMem[80] <= 32'h8FA50002;// lw $5 2 ( $29 )
InstMem[81] <= 32'h8FA60001;// lw $6 1 ( $29 )
InstMem[82] <= 32'h8FA70000;// lw $7 0 ( $29 )
InstMem[83] <= 32'h0C000058;// jal merge
InstMem[84] <= 32'h8FBF0003;// lw $31 3 ( $29 )
InstMem[85] <= 32'h23BD0004;// addi $29 $29 4
InstMem[86] <= 32'h03E00008;// jr $31
InstMem[87] <= 32'h03E00008;// jr $31
InstMem[88] <= 32'h00A08020;// add $16 $5 $0
InstMem[89] <= 32'h00A08820;// add $17 $5 $0
InstMem[90] <= 32'h20F20001;// addi $18 $7 1
InstMem[91] <= 32'h00F0082A;// slt $1 $7 $16
InstMem[92] <= 32'h1420001D;// bne $1 $0 29
InstMem[93] <= 32'h00D2082A;// slt $1 $6 $18
InstMem[94] <= 32'h1420001B;// bne $1 $0 27
InstMem[95] <= 32'h08000060;// j if
InstMem[96] <= 32'h00104000;// sll $8 $16 0
InstMem[97] <= 32'h01044020;// add $8 $8 $4
InstMem[98] <= 32'h8D090000;// lw $9 0 ( $8 )
InstMem[99] <= 32'h00125000;// sll $10 $18 0
InstMem[100] <= 32'h01445020;// add $10 $10 $4
InstMem[101] <= 32'h8D4B0000;// lw $11 0 ( $10 )
InstMem[102] <= 32'h0169082A;// slt $1 $11 $9
InstMem[103] <= 32'h14200008;// bne $1 $0 8
InstMem[104] <= 32'h200C0000;// addi $12 $0 0
InstMem[105] <= 32'h00116800;// sll $13 $17 0
InstMem[106] <= 32'h018D6020;// add $12 $12 $13
InstMem[107] <= 32'hAD890000;// sw $9 0 ( $12 )
InstMem[108] <= 32'h22310001;// addi $17 $17 1
InstMem[109] <= 32'h22100001;// addi $16 $16 1
InstMem[110] <= 32'h0800005B;// j while1
InstMem[111] <= 32'h00125000;// sll $10 $18 0
InstMem[112] <= 32'h01445020;// add $10 $10 $4
InstMem[113] <= 32'h8D4B0000;// lw $11 0 ( $10 )
InstMem[114] <= 32'h200C0000;// addi $12 $0 0
InstMem[115] <= 32'h00116800;// sll $13 $17 0
InstMem[116] <= 32'h018D6020;// add $12 $12 $13
InstMem[117] <= 32'hAD8B0000;// sw $11 0 ( $12 )
InstMem[118] <= 32'h22310001;// addi $17 $17 1
InstMem[119] <= 32'h22520001;// addi $18 $18 1
InstMem[120] <= 32'h0800005B;// j while1
InstMem[121] <= 32'h00F0082A;// slt $1 $7 $16
InstMem[122] <= 32'h1420000B;// bne $1 $0 11
InstMem[123] <= 32'h00104000;// sll $8 $16 0
InstMem[124] <= 32'h00884020;// add $8 $4 $8
InstMem[125] <= 32'h8D090000;// lw $9 0 ( $8 )
InstMem[126] <= 32'h200A0000;// addi $10 $0 0
InstMem[127] <= 32'h00115800;// sll $11 $17 0
InstMem[128] <= 32'h016A5820;// add $11 $11 $10
InstMem[129] <= 32'hAD690000;// sw $9 0 ( $11 )
InstMem[130] <= 32'h22310001;// addi $17 $17 1
InstMem[131] <= 32'h22100001;// addi $16 $16 1
InstMem[132] <= 32'h08000079;// j while2
InstMem[133] <= 32'h00D1082A;// slt $1 $6 $17
InstMem[134] <= 32'h1420000B;// bne $1 $0 11
InstMem[135] <= 32'h00125000;// sll $10 $18 0
InstMem[136] <= 32'h01445020;// add $10 $10 $4
InstMem[137] <= 32'h8D4B0000;// lw $11 0 ( $10 )
InstMem[138] <= 32'h200C0000;// addi $12 $0 0
InstMem[139] <= 32'h00116800;// sll $13 $17 0
InstMem[140] <= 32'h018D6020;// add $12 $12 $13
InstMem[141] <= 32'hAD8B0000;// sw $11 0 ( $12 )
InstMem[142] <= 32'h22310001;// addi $17 $17 1
InstMem[143] <= 32'h22520001;// addi $18 $18 1
InstMem[144] <= 32'h08000085;// j while3
InstMem[145] <= 32'h00A04020;// add $8 $5 $0
InstMem[146] <= 32'h20C90001;// addi $9 $6 1
InstMem[147] <= 32'h200C0000;// addi $12 $0 0
InstMem[148] <= 32'h08000095;// j for
InstMem[149] <= 32'h0109082A;// slt $1 $8 $9
InstMem[150] <= 32'h10200008;// beq $1 $0 8
InstMem[151] <= 32'h00085000;// sll $10 $8 0
InstMem[152] <= 32'h01445820;// add $11 $10 $4
InstMem[153] <= 32'h014C6820;// add $13 $10 $12
InstMem[154] <= 32'h8DAE0000;// lw $14 0 ( $13 )
InstMem[155] <= 32'hAD6E0000;// sw $14 0 ( $11 )
InstMem[156] <= 32'h21080001;// addi $8 $8 1
InstMem[157] <= 32'h08000095;// j for
InstMem[158] <= 32'h03E00008;// jr $31
InstMem[159] <= 32'hFC000000;// hlt
InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt
`endif

`ifdef dec
InstMem[ 0] <= 32'h200D03E8;// addi $13 $0 1000
InstMem[ 1] <= 32'h200C0096;// addi $12 $0 150
InstMem[ 2] <= 32'h20080000;// addi $8 $0 0
InstMem[ 3] <= 32'h20090000;// addi $9 $0 0
InstMem[ 4] <= 32'h8C0A0001;// lw $10 1 ( $0 )
InstMem[ 5] <= 32'h8C0B0002;// lw $11 2 ( $0 )
InstMem[ 6] <= 32'h8C0F0000;// lw $15 0 ( $0 )
InstMem[ 7] <= 32'h11A00018;// beq $13 $zero 24
InstMem[ 8] <= 32'h8D0E0003;// lw $14 3 ( $8 )
InstMem[ 9] <= 32'h8D100004;// lw $16 4 ( $8 )
InstMem[10] <= 32'h000EC020;// add $24 $0 $14
InstMem[11] <= 32'h0010C820;// add $25 $0 $16
InstMem[12] <= 32'h0000D020;// add $26 $0 $0
InstMem[13] <= 32'h134C0008;// beq $26 $12 8
InstMem[14] <= 32'h01CFB826;// xor $23 $14 $15
InstMem[15] <= 32'h0017B8C2;// srl $23 $23 3
InstMem[16] <= 32'h0217A026;// xor $20 $16 $23
InstMem[17] <= 32'h000E8020;// add $16 $0 $14
InstMem[18] <= 32'h00147020;// add $14 $0 $20
InstMem[19] <= 32'h235A0001;// addi $26 $26 1
InstMem[20] <= 32'h0C00000D;// jal feisteldecryptloop
InstMem[21] <= 32'h01CA7026;// xor $14 $14 $10
InstMem[22] <= 32'h020B8026;// xor $16 $16 $11
InstMem[23] <= 32'hAD2E07D3;// sw $14 2003 ( $9 )
InstMem[24] <= 32'hAD3007D4;// sw $16 2004 ( $9 )
InstMem[25] <= 32'h00185020;// add $10 $0 $24
InstMem[26] <= 32'h00195820;// add $11 $0 $25
InstMem[27] <= 32'h21080002;// addi $8 $8 2
InstMem[28] <= 32'h21290002;// addi $9 $9 2
InstMem[29] <= 32'h21ADFFFF;// addi $13 $13 -1
InstMem[30] <= 32'h0C000007;// jal decryptloop
InstMem[31] <= 32'hFC000000;// hlt
InstMem[32] <= 32'hFC000000;// hlt
InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt
`endif





`ifdef simple
`include "./Instruction Queue/code.txt"


InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt

`endif

`ifdef binary

InstMem[ 0] <= 32'h20010000;// addi $1 $0 0x0
InstMem[ 1] <= 32'h2002000B;// addi $2 $0 0xb
InstMem[ 2] <= 32'h20030007;// addi $3 $0 0x7
InstMem[ 3] <= 32'h0041382A;// slt $7 $2 $1
InstMem[ 4] <= 32'h1407000E;// bne $0 $7 14
InstMem[ 5] <= 32'h00412020;// add $4 $2 $1
InstMem[ 6] <= 32'h00042842;// srl $5 $4 1
InstMem[ 7] <= 32'h8CA60000;// lw $6 0x0 ( $5 )
InstMem[ 8] <= 32'h10660008;// beq $3 $6 8
InstMem[ 9] <= 32'h00C3302A;// slt $6 $6 $3
InstMem[10] <= 32'h10C00002;// beq $6 $0 2
InstMem[11] <= 32'h0800000E;// j righthalf
InstMem[12] <= 32'h20A2FFFF;// addi $2 $5 0xffff
InstMem[13] <= 32'h08000003;// j loop
InstMem[14] <= 32'h20A10001;// addi $1 $5 0x1
InstMem[15] <= 32'h08000003;// j loop
InstMem[16] <= 32'h00054020;// add $8 $0 $5
InstMem[17] <= 32'h08000014;// j finish
InstMem[18] <= 32'h2008FFFF;// addi $8 $0 0xffff
InstMem[19] <= 32'h08000014;// j finish
InstMem[20] <= 32'h00000000;// nop
InstMem[21] <= 32'hFC000000;// hlt



InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt

`endif


`ifdef insertion
InstMem[ 0] <= 32'h2014000A;// addi $20 $0 10
InstMem[ 1] <= 32'h20130002;// addi $19 $0 2
InstMem[ 2] <= 32'h2016FFFF;// addi $22 $0 -1
InstMem[ 3] <= 32'h0274F822;// sub $31 $19 $20
InstMem[ 4] <= 32'h03E0082A;// slt $at $31 $0
InstMem[ 5] <= 32'h10200011;// beq $at $0 17
InstMem[ 6] <= 32'h8E680000;// lw $8 0 ( $19 )
InstMem[ 7] <= 32'h2262FFFF;// addi $2 $19 -1
InstMem[ 8] <= 32'h0056182B;// sgt $3 $2 $22
InstMem[ 9] <= 32'h10600009;// beq $3 $0 9
InstMem[10] <= 32'h8C450000;// lw $5 0 ( $2 )
InstMem[11] <= 32'h00A8202B;// sgt $4 $5 $8
InstMem[12] <= 32'h00643824;// and $7 $3 $4
InstMem[13] <= 32'h10E00005;// beq $7 $0 5
InstMem[14] <= 32'h20460001;// addi $6 $2 1
InstMem[15] <= 32'hACC50000;// sw $5 0 ( $6 )
InstMem[16] <= 32'h2042FFFF;// addi $2 $2 -1
InstMem[17] <= 32'h08000008;// j while_loop
InstMem[18] <= 32'h20420001;// addi $2 $2 1
InstMem[19] <= 32'hAC480000;// sw $8 0 ( $2 )
InstMem[20] <= 32'h22730001;// addi $19 $19 1
InstMem[21] <= 32'h08000003;// j for_loop
InstMem[22] <= 32'hFC000000;// hlt


InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt

`endif


`ifdef bubble
// this is bubble sort
InstMem[  0] <= 32'h2001000A; // addi $1 $0 10
InstMem[  1] <= 32'h00015880; // sll $11 $1 2
InstMem[  2] <= 32'h216B0001; // addi $11 $11 1
InstMem[  3] <= 32'h20020000; // addi $2 $0 0
InstMem[  4] <= 32'h00011820; // add $3 $0 $1
InstMem[  5] <= 32'h004B4022; // sub $8 $2 $11
InstMem[  6] <= 32'h0100082A; // slt $at $8 $0
InstMem[  7] <= 32'h10200006; // beq $at $0 6
InstMem[  8] <= 32'hAC430000; // sw $3 0x0 ( $2 )
InstMem[  9] <= 32'hAC430001; // sw $3 0x1 ( $2 )
InstMem[ 10] <= 32'h20420002; // addi $2 $2 2
InstMem[ 11] <= 32'h2063FFFF; // addi $3 $3 -1
InstMem[ 12] <= 32'h1000FFF9; // beq $0 $0 -7
InstMem[ 13] <= 32'h20030000; // addi $3 $0 0
InstMem[ 14] <= 32'h106B0010; // beq $3 $11 16
InstMem[ 15] <= 32'h20040000; // addi $4 $0 0
InstMem[ 16] <= 32'h000B3820; // add $7 $0 $11
InstMem[ 17] <= 32'h00E33822; // sub $7 $7 $3
InstMem[ 18] <= 32'h1087000A; // beq $4 $7 10
InstMem[ 19] <= 32'h8C850000; // lw $5 0x0 ( $4 )
InstMem[ 20] <= 32'h8C860001; // lw $6 0x1 ( $4 )
InstMem[ 21] <= 32'h00A64022; // sub $8 $5 $6
InstMem[ 22] <= 32'h0100082A; // slt $at $8 $0
InstMem[ 23] <= 32'h14200003; // bne $at $0 3
InstMem[ 24] <= 32'hAC850001; // sw $5 0x1 ( $4 )
InstMem[ 25] <= 32'hAC860000; // sw $6 0x0 ( $4 )
InstMem[ 26] <= 32'h20840001; // addi $4 $4 1
InstMem[ 27] <= 32'h1000FFF7; // beq $0 $0 -9
InstMem[ 28] <= 32'h20630001; // addi $3 $3 1
InstMem[ 29] <= 32'h1000FFF1; // beq $0 $0 -15
InstMem[ 30] <= 32'hFC000000; // hlt


InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt

`endif


`ifdef invalid_instruction_memory
// invalid instruction memory address
InstMem[  0] <= 32'h20010003; // addi $1 $zero 3
InstMem[  1] <= 32'h2021FFFC; // addi $1 $1 -4
InstMem[  2] <= 32'h00200008; // jr $1
InstMem[  3] <= 32'h2002007B; // addi $2 $0 123
InstMem[  4] <= 32'h2003007B; // addi $3 $0 123
InstMem[  5] <= 32'h2004007B; // addi $4 $0 123
InstMem[  6] <= 32'hFC000000; // hlt


InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt

`endif

`ifdef invalid_data_memory
// invalid data memory address
InstMem[  0] <= 32'h2001007B; // addi $1 $zero 123
InstMem[  1] <= 32'h2002FFFF; // addi $2 $zero -1
InstMem[  2] <= 32'h206300EA; // addi $3 $3 234
InstMem[  3] <= 32'hAC410000; // sw $1 0 ( $2 )
InstMem[  4] <= 32'hFC000000; // hlt


InstMem[999] <= 32'hFC000000;// hlt
InstMem[1000] <= 32'h201FFFFF;// addi x31 x0 -1
InstMem[1001] <= 32'hFC000000;// hlt

`endif






