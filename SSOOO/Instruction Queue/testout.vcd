$date
	Wed Oct 30 22:09:21 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module InstQ_tb $end
$var wire 5 ! shamt [4:0] $end
$var wire 5 " rt [4:0] $end
$var wire 5 # rs [4:0] $end
$var wire 5 $ rd [4:0] $end
$var wire 6 % opcode [5:0] $end
$var wire 16 & immediate [15:0] $end
$var wire 6 ' funct [5:0] $end
$var wire 26 ( address [25:0] $end
$var reg 32 ) PC [31:0] $end
$var integer 32 * i [31:0] $end
$var integer 32 + index [31:0] $end
$scope module dut $end
$var wire 32 , PC [31:0] $end
$var wire 32 - inst [31:0] $end
$var wire 5 . shamt [4:0] $end
$var wire 5 / rt [4:0] $end
$var wire 5 0 rs [4:0] $end
$var wire 5 1 rd [4:0] $end
$var wire 6 2 opcode [5:0] $end
$var wire 16 3 immediate [15:0] $end
$var wire 6 4 funct [5:0] $end
$var wire 26 5 address [25:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10000000001100100 5
b100100 4
b1100100 3
b1000 2
b0 1
b0 0
b1 /
b1 .
b100000000000010000000001100100 -
b0 ,
b1 +
b0 *
b0 )
b10000000001100100 (
b100100 '
b1100100 &
b1000 %
b0 $
b0 #
b1 "
b1 !
$end
#1
b101011 %
b101011 2
b1 '
b1 4
b0 !
b0 .
b1 &
b1 3
b10000000000000001 (
b10000000000000001 5
b10 +
b10101100000000010000000000000001 -
b1 )
b1 ,
b1 *
#2
b1000 %
b1000 2
b111011 '
b111011 4
b1 #
b1 0
b0 "
b0 /
b1 !
b1 .
b1111011 &
b1111011 3
b1000000000000001111011 (
b1000000000000001111011 5
b11 +
b100000001000000000000001111011 -
b10 )
b10 ,
b10 *
#3
b111110 '
b111110 4
b0 #
b0 0
b10 "
b10 /
b11111 $
b11111 1
b11111 !
b11111 .
b1111111111111110 &
b1111111111111110 3
b101111111111111110 (
b101111111111111110 5
b100 +
b100000000000101111111111111110 -
b11 )
b11 ,
b11 *
#4
b101011 %
b101011 2
b10 '
b10 4
b10 #
b10 0
b0 $
b0 1
b0 !
b0 .
b10 &
b10 3
b10000100000000000000010 (
b10000100000000000000010 5
b101 +
b10101100010000100000000000000010 -
b100 )
b100 ,
b100 *
#5
b0 %
b0 2
b100000 '
b100000 4
b1 #
b1 0
b11 $
b11 1
b1100000100000 &
b1100000100000 3
b1000100001100000100000 (
b1000100001100000100000 5
b110 +
b1000100001100000100000 -
b101 )
b101 ,
b101 *
#6
b101011 %
b101011 2
b11 #
b11 0
b11 "
b11 /
b11111 $
b11111 1
b11110 !
b11110 .
b1111111110100000 &
b1111111110100000 3
b11000111111111110100000 (
b11000111111111110100000 5
b111 +
b10101100011000111111111110100000 -
b110 )
b110 ,
b110 *
#7
b0 %
b0 2
b1 #
b1 0
b10 "
b10 /
b0 $
b0 1
b0 !
b0 .
b100000 &
b100000 3
b1000100000000000100000 (
b1000100000000000100000 5
b1000 +
b1000100000000000100000 -
b111 )
b111 ,
b111 *
#8
b100010 '
b100010 4
b11 #
b11 0
b100 $
b100 1
b10000000100010 &
b10000000100010 3
b11000100010000000100010 (
b11000100010000000100010 5
b1001 +
b11000100010000000100010 -
b1000 )
b1000 ,
b1000 *
#9
b100 #
b100 0
b100000100010000000100010 (
b100000100010000000100010 5
b1010 +
b100000100010000000100010 -
b1001 )
b1001 ,
b1001 *
#10
b101011 %
b101011 2
b11 '
b11 4
b0 #
b0 0
b100 "
b100 /
b0 $
b0 1
b11 &
b11 3
b1000000000000000011 (
b1000000000000000011 5
b1011 +
b10101100000001000000000000000011 -
b1010 )
b1010 ,
b1010 *
#11
b0 %
b0 2
b100011 '
b100011 4
b11 #
b11 0
b10 "
b10 /
b101 $
b101 1
b10100000100011 &
b10100000100011 3
b11000100010100000100011 (
b11000100010100000100011 5
b1100 +
b11000100010100000100011 -
b1011 )
b1011 ,
b1011 *
#12
b100001 '
b100001 4
b1 #
b1 0
b110 $
b110 1
b11000000100001 &
b11000000100001 3
b1000100011000000100001 (
b1000100011000000100001 5
b1101 +
b1000100011000000100001 -
b1100 )
b1100 ,
b1100 *
#13
b100010 '
b100010 4
b110 #
b110 0
b11000000100010 &
b11000000100010 3
b110000100011000000100010 (
b110000100011000000100010 5
b1110 +
b110000100011000000100010 -
b1101 )
b1101 ,
b1101 *
#14
b1110 *
