$date
	Wed Dec 18 19:27:21 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module InstQ_tb $end
$var wire 5 ! shamt [4:0] $end
$var wire 5 " rt [4:0] $end
$var wire 5 # rs [4:0] $end
$var wire 5 $ rd [4:0] $end
$var wire 12 % opcode [11:0] $end
$var wire 16 & immediate [15:0] $end
$var wire 26 ' address [25:0] $end
$var reg 32 ( PC [31:0] $end
$var integer 32 ) i [31:0] $end
$var integer 32 * index [31:0] $end
$scope module dut $end
$var wire 32 + PC [31:0] $end
$var wire 32 , inst [31:0] $end
$var wire 5 - shamt [4:0] $end
$var wire 5 . rt [4:0] $end
$var wire 5 / rs [4:0] $end
$var wire 5 0 rd [4:0] $end
$var wire 12 1 opcode [11:0] $end
$var wire 16 2 immediate [15:0] $end
$var wire 26 3 address [25:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b10000000001100100 3
b1100100 2
b1000100100 1
b0 0
b0 /
b1 .
b1 -
b100000000000010000000001100100 ,
b0 +
b1 *
b0 )
b0 (
b10000000001100100 '
b1100100 &
b1000100100 %
b0 $
b0 #
b1 "
b1 !
$end
#1
b101011000001 %
b101011000001 1
b0 !
b0 -
b1 &
b1 2
b10000000000000001 '
b10000000000000001 3
b10 *
b10101100000000010000000000000001 ,
b1 (
b1 +
b1 )
#2
b1000111011 %
b1000111011 1
b1 #
b1 /
b0 "
b0 .
b1 !
b1 -
b1111011 &
b1111011 2
b1000000000000001111011 '
b1000000000000001111011 3
b11 *
b100000001000000000000001111011 ,
b10 (
b10 +
b10 )
#3
b1000111110 %
b1000111110 1
b0 #
b0 /
b10 "
b10 .
b11111 $
b11111 0
b11111 !
b11111 -
b1111111111111110 &
b1111111111111110 2
b101111111111111110 '
b101111111111111110 3
b100 *
b100000000000101111111111111110 ,
b11 (
b11 +
b11 )
#4
b101011000010 %
b101011000010 1
b10 #
b10 /
b0 $
b0 0
b0 !
b0 -
b10 &
b10 2
b10000100000000000000010 '
b10000100000000000000010 3
b101 *
b10101100010000100000000000000010 ,
b100 (
b100 +
b100 )
#5
b100000 %
b100000 1
b1 #
b1 /
b11 $
b11 0
b1100000100000 &
b1100000100000 2
b1000100001100000100000 '
b1000100001100000100000 3
b110 *
b1000100001100000100000 ,
b101 (
b101 +
b101 )
#6
b101011100000 %
b101011100000 1
b11 #
b11 /
b11 "
b11 .
b11111 $
b11111 0
b11110 !
b11110 -
b1111111110100000 &
b1111111110100000 2
b11000111111111110100000 '
b11000111111111110100000 3
b111 *
b10101100011000111111111110100000 ,
b110 (
b110 +
b110 )
#7
b100000 %
b100000 1
b1 #
b1 /
b10 "
b10 .
b0 $
b0 0
b0 !
b0 -
b100000 &
b100000 2
b1000100000000000100000 '
b1000100000000000100000 3
b1000 *
b1000100000000000100000 ,
b111 (
b111 +
b111 )
#8
b100010 %
b100010 1
b11 #
b11 /
b100 $
b100 0
b10000000100010 &
b10000000100010 2
b11000100010000000100010 '
b11000100010000000100010 3
b1001 *
b11000100010000000100010 ,
b1000 (
b1000 +
b1000 )
#9
b100 #
b100 /
b100000100010000000100010 '
b100000100010000000100010 3
b1010 *
b100000100010000000100010 ,
b1001 (
b1001 +
b1001 )
#10
b101011000011 %
b101011000011 1
b0 #
b0 /
b100 "
b100 .
b0 $
b0 0
b11 &
b11 2
b1000000000000000011 '
b1000000000000000011 3
b1011 *
b10101100000001000000000000000011 ,
b1010 (
b1010 +
b1010 )
#11
b100011 %
b100011 1
b11 #
b11 /
b10 "
b10 .
b101 $
b101 0
b10100000100011 &
b10100000100011 2
b11000100010100000100011 '
b11000100010100000100011 3
b1100 *
b11000100010100000100011 ,
b1011 (
b1011 +
b1011 )
#12
b100001 %
b100001 1
b1 #
b1 /
b110 $
b110 0
b11000000100001 &
b11000000100001 2
b1000100011000000100001 '
b1000100011000000100001 3
b1101 *
b1000100011000000100001 ,
b1100 (
b1100 +
b1100 )
#13
b100010 %
b100010 1
b110 #
b110 /
b11000000100010 &
b11000000100010 2
b110000100011000000100010 '
b110000100011000000100010 3
b1110 *
b110000100011000000100010 ,
b1101 (
b1101 +
b1101 )
#14
b1110 )
